<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="einzelneAufgabe" script:language="StarBasic">REM  *****  BASIC  *****

Sub Main

End Sub

&apos;Der Zugriff auf den im Formular aktuell ausgewählten Datensatz erfolgt wie bei einem resultset. Nur das hier
&apos;das Resultset direkt das Formular ist. Der aktuelle Datensatz ist innerhalb des Formulares eine Zeile mit den
&apos;entsprechenden Spalten des Datensatzes. Der Zugriff erfolgt dann mit get(typ) und der Spaltenangabe.

Sub aktuelle_ID_bestimmen
	sID = sfAusgabeID() &apos; Aufruf von Funktion sfAusgabeID()
	MsgBox sID
	&apos;aaa = sfAusgabeAufgabe()
	&apos;MsgBox aaa
End Sub

Sub AktuelleAufgabeKopieren() 
	&apos;Zu bearbeitende Aufgaben auswählen!
	rueckgabe = MsgBox(&quot;Willst Du wirklich die aktuelle Aufgabe kopieren?&quot;,1)
	if rueckgabe = 2 then
		MsgBox &quot;Abbruch! Es wird keine Aufgabe kopiert.&quot;
		exit sub
	end if

	Dim iIDAktuell,iIDLetzte, iIDLetzePlusEins As Integer
	Dim sWorkingDirectory, sAufgabenVerzeichnis As String
	
	&apos;ID des aktuellen und des letztes Eintrags bestimmen:
	iIDAktuell = cint(sfAusgabeID()) 
	iIDLetze = cint(iIDLetzterEintrag(&quot;Aufgaben&quot;))
	iIDLetzePlusEins = iIDLetze + 1
	
	&apos;Pfad zu Arbeitsverzeichnis:
	sWorkingDirectory = sfWorkingDirectory(&quot;aufgdbphys.odb&quot;)
	sAufgabenVerzeichnis = sfAufgabenverzeichnis
	&apos;Pfad zum Ordner der Originalaufgabe
	sURLAktuell = converttourl(sWorkingDirectory &amp; sAufgabenVerzeichnis &amp; &quot;/&quot; &amp; iIDAktuell)
	&apos;msgbox sURLAktuell
	&apos;Pfad zum Ordner der kpieren und neu eingefügten Aufgabe:
	sURLKopiert = converttourl(sWorkingDirectory &amp; sAufgabenVerzeichnis &amp; &quot;/&quot; &amp; iIDLetzePlusEins)
	&apos;msgbox sURLKopiert
	
	&apos;Datensatz auslesen:
	aAufgabe = aDatensatzAusTabelleAuslesen(iIDAktuell, &quot;Aufgaben&quot;)
	
	&apos;Neu (bi) 25.9.15
	&apos;Apostroph (Hochkomma) maskieren, da sonst Probleme mit SQL-Befehle, in welche auch Apostrophe vorkommen!
	for i = 1 to ubound(aAufgabe())-1
		sHilf = aAufgabe(i)
		aAufgabe(i) = Replace(sHilf,&quot;&apos;&quot;,&quot;&apos;&apos;&quot;)
		&apos;msgbox aArrayAufgabe(i)
	next
	&apos;Ende Neu (bi) 25.9.15
	
	&apos;Folgende Datensätze ändern
	&apos;Autor wird auf unbekannt (=7) gesetzt:
	aAufgabe(2) = 7
	&apos;Alte ID wird gelöscht, da sonst Doppeldeutigkeiten entstehen könnten!
	aAufgabe(19) = &quot;&quot;
	&apos;Permanente ID wird gelöscht, da sonst Doppeldeutigkeiten entstehen könnten!
	aAufgabe(21) = &quot;&quot;
	
	&apos;Datensatz einlesen:
	aDatensatzInTabelleEinlesen_V02(&quot;Aufgaben&quot;, aAufgabe)
	
	&apos;Ordnerinhalt kopieren:
	KopierenUndUmbenennenOrdner(sURLAktuell,sURLKopiert)
	
	&apos;Datendank aktualisieren:
	DatenbankAktualisieren()
	
	&apos;Neu (bi) 25.9.15
	MsgBox &quot;Aufgabe ans Ende kopiert!&quot;
	&apos;Ende Neu (bi) 25.9.15
End Sub

Sub VerzeichnisMitAktuellerIDerstellen
	&apos;aktuelle ID bestimmen:
	sID = sfAusgabeID() &apos; Aufruf von Funktion sfAusgabeID()
	&apos;Arbeitsverzeichnisbestimmen
	sWorkingDirectory=sfWorkingDirectory(&quot;aufgdbphys.odb&quot;)
	&apos;Testen, ob Verzeichnis (sWorkingDirectory &amp; sfAufgabenverzeichnis &amp; &quot;/&quot;) schon vorhanden
	if FileExists(sWorkingDirectory &amp; sfAufgabenverzeichnis &amp; &quot;/&quot;) then
		&apos;MsgBox &quot;Verzechnis &quot; &amp; sWorkingDirectory &amp; sfAufgabenverzeichnis &amp; &quot;/&quot; &amp; &quot; existiert&quot;
		else
		VerzeichnisErstellen(sWorkingDirectory &amp; sfAufgabenverzeichnis &amp; &quot;/&quot;)
		&apos;MsgBox &quot;Verzeichnis &quot; &amp; sWorkingDirectory &amp; sfAufgabenverzeichnis &amp; &quot;/&quot; &amp; &quot; wurde NEU erstellt&quot;
	end if
	&apos;Testen, ob Verzeichnis (sWorkingDirectory &amp; sfAufgabenverzeichnis &amp; &quot;/&quot; &amp; &quot;sID&quot;) schon vorhanden
	if FileExists(sWorkingDirectory &amp; sfAufgabenverzeichnis &amp; &quot;/&quot; &amp; sID &amp; &quot;/&quot;) then
		&apos;MsgBox &quot;Verzeichnis &quot; &amp; sWorkingDirectory &amp; sfAufgabenverzeichnis &amp; &quot;/&quot; &amp; sID &amp; &quot;/&quot; &amp; &quot; existiert&quot;
		else
		VerzeichnisErstellen(sWorkingDirectory &amp; sfAufgabenverzeichnis &amp; &quot;/&quot; &amp; sID &amp; &quot;/&quot;)
		&apos;MsgBox &quot;Verzeichnis &quot; &amp; sWorkingDirectory &amp; sfAufgabenverzeichnis &amp; &quot;/&quot; &amp; sID &amp; &quot;/&quot; &amp; &quot; wurde NEU erstellt&quot;
	end if
	&apos;Verzechnis öffnen (zum Einfügen von Bilddateien
    FileManagerOeffnen(sWorkingDirectory &amp; sfAufgabenverzeichnis &amp; &quot;/&quot; &amp; sID)
End Sub

Function sfErstelleTexHeader
	&apos;Loesungen anzeigen: J/N
	oForm1 = ThisComponent.drawpage.getForms.GetByName(&quot;MainForm&quot;)
	oLsgJN = oForm1.getbyName(&quot;LoesungenJN&quot;)

	odoc=thiscomponent
	oform=odoc.drawpage.forms.getbyindex(1)
	sNamePruefung = oform.getstring(2)
	&apos;sAufgabenIDs = oform.getstring(3)
	&apos;sPosition = oform.getstring(4)
	sThema = oform.getstring(5)
	sKlasse = oform.getstring(6)
	sDatum = oform.getstring(7)
	sLehrer = oform.getstring(8)
	sSerie = oform.getstring(9)
	MsgBox sNamePruefung &amp; chr(13) &amp; sThema &amp; chr(13) &amp; sKlasse &amp; chr(13) &amp; sDatum &amp; chr(13) &amp; sLehrer
	
	Dim iHeaderDateiNummerPartA As Integer
	Dim iHeaderDateiNummerPartB As Integer
	&apos;Dim iHeaderDateiNummerNEW As Integer
    iHeaderDateiNummerPartA = FreeFile
    iHeaderDateiNummerPartB = FreeFile
    &apos;iHeaderDateiNummerNEW = FreeFile
    
    sWorkingDirectory = sfWorkingDirectory(&quot;aufgdbphys.odb&quot;)
	sTexDateienVerzeichnis = sfAufgabenverzeichnis
	
	sTexHeaderA = &quot;headerfooter/header3a.tex&quot;
	sTexHeaderB = &quot;headerfooter/header3b.tex&quot;
	&apos;sAufgabenDateiName = sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sTexDatei &amp; &quot;.tex&quot;            &apos; Define file name
	sHeaderDateiPartA_Pfad = sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sTexHeaderA            &apos; Define file name
	sHeaderDateiPartB_Pfad = sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sTexHeaderB &apos; Define file name

	&apos;MsgBox sHeaderDateiPartA_Pfad &amp; &quot; &quot; &amp; sHeaderDateiPartB_Pfad
	
	&apos;HeaderdateiA in String auslesen
	sTexHeaderAInhalt = sfDateiInhalt(sHeaderDateiPartA_Pfad,iHeaderDateiNummerPartA)
	&apos;HeaderdateiB in String auslesen
	sTexHeaderBInhalt = sfDateiInhalt(sHeaderDateiPartB_Pfad,iHeaderDateiNummerPartB)
	&apos;MsgBox sTexHeaderAInhalt
	
	&apos;Zwischenteil
	&apos;sZwischenteil = &quot;Physik &amp; &quot; &amp; sThema &amp; &quot; &amp; &quot; &amp; sLehrer &amp; &quot;\\&quot; &amp; chr(13) &amp; sKlasse &amp; &quot; &amp; &quot; &amp; sSerie &amp; &quot; &amp; &quot; &amp; sDatum &amp; chr(13)
	sZwischenteil = &quot;\noindent\parbox{0.3333\linewidth}{\textbf{\textsf{Physikpr\&quot;&quot;ufung}}}&quot; &amp;_
	&quot;\parbox{0.3333\linewidth}{\centering \textbf{\textsf{&quot; &amp; sThema &amp; &quot;}}\par}&quot; &amp;_
	&quot;\parbox{0.3333\linewidth}{\raggedleft \textbf{\textsf{&quot; &amp; sDatum &amp; &quot;}}}&quot; &amp;_
	chr(13) &amp; chr(13) &amp;_
	&quot;\noindent\parbox{0.3333\linewidth}{\textbf{\textsf{&quot; &amp; sKlasse &amp; &quot;}}}&quot; &amp;_
	&quot;\parbox{0.3333\linewidth}{\centering \textbf{\textsf{&quot; &amp; sSerie &amp; &quot;}}\par}&quot; &amp;_
	&quot;\parbox{0.3333\linewidth}{\raggedleft \textbf{\textsf{&quot; &amp; sLehrer &amp; &quot;}}}&quot;

	&apos;MsgBox sZwischenteil
	
	&apos;Zusammenfügen
	if oLsgJN.State = 1 then
		sNeu = sTexHeaderAInhalt &amp; &quot;\begin{center}\textsf{\textbf{--- Musterl\&quot;&quot;osung ---}}\end{center}&quot; &amp; chr(13) &amp; sZwischenteil &amp; sTexHeaderBInhalt
	else
		sNeu = sTexHeaderAInhalt &amp; sZwischenteil &amp; sTexHeaderBInhalt
	end if	
	&apos;MsgBox sNeu
	sfErstelleTexHeader = sNeu
End Function

Sub TexDateiErstellenAuswahl
	AufgabeSpeichern()
	&apos;---------------
	&apos;In einem späteren Schritt sHeader und sFooter als Werte übergeben, welche aus einer separaten Tabelle ausgelesen werden...
	Dim iAufgabenDateiNummer As Integer
	Dim iHeaderDateiNummer As Integer
	Dim iFooterDateiNummer As Integer
    iAufgabenDateiNummer = FreeFile
    iHeaderDateiNummer = FreeFile
    iFooterDateiNummer = FreeFile
    
   	sWorkingDirectory = sfWorkingDirectory(&quot;aufgdbphys.odb&quot;)
	sTexDateienVerzeichnis = sfAufgabenverzeichnis
	
	&apos;Loesungen anzeigen: J/N
	oForm = ThisComponent.drawpage.getForms.GetByName(&quot;MainForm&quot;)
	oLsgJN = oForm.getbyName(&quot;LoesungenJN&quot;)
	oKurzLsgJN = oForm.getbyName(&quot;KurzLoesungenJN&quot;)
	
	sTexDatei = &quot;auswahl_aufgaben&quot;
	sTexHeader = &quot;headerfooter/header2&quot;
	sTexFooter = &quot;headerfooter/footer&quot;
	sAufgabenDateiName = sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sTexDatei &amp; &quot;.tex&quot;            &apos; Define file name
	sHeaderDateiName = sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sTexHeader &amp; &quot;.txt&quot;            &apos; Define file name
	sFooterDateiName = sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sTexFooter &amp; &quot;.txt&quot; &apos; Define file name
	&apos;---------------
	Dim DatabaseContext, DataSource, Connection, InteractionHandler, Statement, ResultSet As Object
	Dim iZaehler01,iZaehler02 As Integer
	Dim sID, sAufgabe As String 
	
    &apos;DatenbankKontext erstellen
    DatabaseContext = createUnoService(&quot;com.sun.star.sdb.DatabaseContext&quot;)
    &apos;Datenbank kontaktieren
    DataSource = DatabaseContext.getByName(&quot;aufgdbphys&quot;)
    &apos;Testen, ob Passwort benötigt wird
    If Not DataSource.IsPasswordRequired Then
    	Connection = DataSource.GetConnection(&quot;&quot;,&quot;&quot;)
    Else	
    	InteractionHandler = createUnoService(&quot;com.sun.star.sdb.InteractionHandler&quot;)
    	Connection = DataSource.ConnectWithCompletion(InteractionHandler)
    End If
    &apos;Abfrage erstellen
    Statement = Connection.createStatement()
   &apos;ResultSet = Statement.executeQuery(&quot; SELECT `aufgaben`.`Aufg_ID` AS `Aufg_ID`, `aufgaben`.`AutorID` AS `AutorID`, `aufgaben`.`SchwierigkeitsgradID` AS `SchwierigkeitsgradID`, `aufgaben`.`Untergebiet` AS `Untergebiet`, `aufgaben`.`Aufgabentext` AS `Aufgabentext`, `aufgaben`.`Lösung` AS `Lösung`, `aufgaben`.`LinkBild` AS `LinkBild`, `aufgaben`.`AuswahlDruck` AS `AuswahlDruck`, `aufgaben`.`Position` AS `Position` FROM `ph_aufg_db`.`aufgaben` `aufgaben` WHERE ( aufgaben.AuswahlDruck = true ) ORDER BY `position`&quot;)
   ResultSet = Statement.executeQuery(&quot;SELECT `Aufgaben`.`AufgID` AS `AufgID`, `Aufgaben`.`Fachgebiet` AS `Fachgebiet`, `Aufgaben`.`Author` AS `Author`, `Aufgaben`.`Schwierigkeitsgrad` AS `Schwierigkeitsgrad`, `Aufgaben`.`LetzteAenderung` AS `LetzteAenderung`, `Aufgaben`.`AufgabenText` AS `AufgabenText`, `Aufgaben`.`LinkZuBild` AS `LinkZuBild`, `Aufgaben`.`MC2` AS `MC2`, `Aufgaben`.`MC3` AS `MC3`, `Aufgaben`.`MC4` AS `MC4`, `Aufgaben`.`MC5` AS `MC5`, `Aufgaben`.`MC6` AS `MC6`, `Aufgaben`.`Loesung` AS `Loesung`, `Aufgaben`.`Auswahl` AS `Auswahl`, `Aufgaben`.`Position` AS `Position`, `Aufgaben`.`LoesungJN` AS `LoesungJN`, `Aufgaben`.`IDVarianten` AS `IDVarianten`, `Aufgaben`.`Kurzloesung` AS `Kurzloesung`, `Aufgaben`.`KurzloesungJN` AS `KurzloesungJN` FROM `Aufgaben` `Aufgaben` WHERE ( `Aufgaben`.`Auswahl` = True ) ORDER BY `Aufgaben`.`Position`, `Aufgaben`.`Fachgebiet`, `Aufgaben`.`Schwierigkeitsgrad`&quot;)   
   &apos;Dimension von ResultSet bestimmen:
   iZaehler01 = 0
   	&apos;- Stringarray mit ID und Aufgabe und evtl weiteren Angaben erstellen (zuerst mehrere 1-dim-Array und dann ein 2-dim-Array)
   	If Not IsNull(ResultSet) Then
   		While ResultSet.next
			iZaehler01 = iZaehler01 + 1
			&apos;MsgBox iZaehler01
		Wend
   	End If
   	
   	If iZaehler01 = 0 then
   		MsgBox &quot;Es wurden keine Aufgaben ausgewählt.&quot;
   		Exit Sub
   	End if	
   	&apos;Array Dimensionieren:
   	Dim sArrayDaten(iZaehler01 - 1,5) As String
   	
    &apos;ResultSet = Statement.executeQuery(&quot;SELECT `Aufgaben`.`AufgID` AS `AufgID`, `Aufgaben`.`Fachgebiet` AS `Fachgebiet`, `Aufgaben`.`Author` AS `Author`, `Aufgaben`.`Schwierigkeitsgrad` AS `Schwierigkeitsgrad`, `Aufgaben`.`LetzteAenderung` AS `LetzteAenderung`, `Aufgaben`.`AufgabenText` AS `AufgabenText`, `Aufgaben`.`LinkZuBild` AS `LinkZuBild`, `Aufgaben`.`MC2` AS `MC2`, `Aufgaben`.`MC3` AS `MC3`, `Aufgaben`.`MC4` AS `MC4`, `Aufgaben`.`MC5` AS `MC5`, `Aufgaben`.`MC6` AS `MC6`, `Aufgaben`.`Loesung` AS `Loesung`, `Aufgaben`.`Auswahl` AS `Auswahl`, `Aufgaben`.`Position` AS `Position`, `Aufgaben`.`LoesungJN` AS `LoesungJN`, `Aufgaben`.`IDVarianten` AS `IDVarianten`, `Aufgaben`.`Kurzloesung` AS `Kurzloesung`, `Aufgaben`.`KurzloesungJN` AS `KurzloesungJN` FROM `Aufgaben` `Aufgaben` WHERE ( `Aufgaben`.`Auswahl` = True )&quot;)
    ResultSet = Statement.executeQuery(&quot;SELECT `Aufgaben`.`AufgID` AS `AufgID`, `Aufgaben`.`Fachgebiet` AS `Fachgebiet`, `Aufgaben`.`Author` AS `Author`, `Aufgaben`.`Schwierigkeitsgrad` AS `Schwierigkeitsgrad`, `Aufgaben`.`LetzteAenderung` AS `LetzteAenderung`, `Aufgaben`.`AufgabenText` AS `AufgabenText`, `Aufgaben`.`LinkZuBild` AS `LinkZuBild`, `Aufgaben`.`MC2` AS `MC2`, `Aufgaben`.`MC3` AS `MC3`, `Aufgaben`.`MC4` AS `MC4`, `Aufgaben`.`MC5` AS `MC5`, `Aufgaben`.`MC6` AS `MC6`, `Aufgaben`.`Loesung` AS `Loesung`, `Aufgaben`.`Auswahl` AS `Auswahl`, `Aufgaben`.`Position` AS `Position`, `Aufgaben`.`LoesungJN` AS `LoesungJN`, `Aufgaben`.`IDVarianten` AS `IDVarianten`, `Aufgaben`.`Kurzloesung` AS `Kurzloesung`, `Aufgaben`.`KurzloesungJN` AS `KurzloesungJN`,`Aufgaben`.`PermanenteID` AS `PermanenteID` FROM `Aufgaben` `Aufgaben` WHERE ( `Aufgaben`.`Auswahl` = True ) ORDER BY `Aufgaben`.`Position`, `Aufgaben`.`Fachgebiet`, `Aufgaben`.`Schwierigkeitsgrad`&quot;)   
   	iZaehler02 = 0
   	If Not IsNull(ResultSet) Then
   		While ResultSet.next
			iZaehler02 = iZaehler02 + 1
			sID = ResultSet.getString(1)
			sAufgabe = ResultSet.getString(6)
			
			&apos;Umlaute ersetzen (unicode vs. ascii-Problematik)
			sAufgabe = Replace(sAufgabe, &quot;ö&quot;, &quot;\&quot;&quot;o&quot;)
			sAufgabe = Replace(sAufgabe, &quot;Ö&quot;, &quot;\&quot;&quot;O&quot;)
			sAufgabe = Replace(sAufgabe, &quot;ä&quot;, &quot;\&quot;&quot;a&quot;)
			sAufgabe = Replace(sAufgabe, &quot;Ä&quot;, &quot;\&quot;&quot;A&quot;)
			sAufgabe = Replace(sAufgabe, &quot;ü&quot;, &quot;\&quot;&quot;u&quot;)
			sAufgabe = Replace(sAufgabe, &quot;Ü&quot;, &quot;\&quot;&quot;U&quot;)
			
			sLoesung = ResultSet.getString(13)
			sLoesung = Replace(sLoesung, &quot;ö&quot;, &quot;\&quot;&quot;o&quot;)
			sLoesung = Replace(sLoesung, &quot;Ö&quot;, &quot;\&quot;&quot;O&quot;)
			sLoesung = Replace(sLoesung, &quot;ä&quot;, &quot;\&quot;&quot;a&quot;)
			sLoesung = Replace(sLoesung, &quot;Ä&quot;, &quot;\&quot;&quot;A&quot;)
			sLoesung = Replace(sLoesung, &quot;ü&quot;, &quot;\&quot;&quot;u&quot;)
			sLoesung = Replace(sLoesung, &quot;Ü&quot;, &quot;\&quot;&quot;U&quot;)
			
			sKurzLoesung = ResultSet.getString(18)
			sKurzLoesung = Replace(sKurzLoesung, &quot;ö&quot;, &quot;\&quot;&quot;o&quot;)
			sKurzLoesung = Replace(sKurzLoesung, &quot;Ö&quot;, &quot;\&quot;&quot;O&quot;)
			sKurzLoesung = Replace(sKurzLoesung, &quot;ä&quot;, &quot;\&quot;&quot;a&quot;)
			sKurzLoesung = Replace(sKurzLoesung, &quot;Ä&quot;, &quot;\&quot;&quot;A&quot;)
			sKurzLoesung = Replace(sKurzLoesung, &quot;ü&quot;, &quot;\&quot;&quot;u&quot;)
			sKurzLoesung = Replace(sKurzLoesung, &quot;Ü&quot;, &quot;\&quot;&quot;U&quot;)
			
			sPermanenteID = ResultSet.getString(20)

			&apos;MsgBox sID &amp; chr(13) &amp; sAufgabe
			&apos;In Array schreiben:
			sArrayDaten(iZaehler02 - 1,0) = sID
			sArrayDaten(iZaehler02 - 1,1) = sAufgabe
			sArrayDaten(iZaehler02 - 1,3) = sLoesung
			sArrayDaten(iZaehler02 - 1,4) = sKurzLoesung
			sArrayDaten(iZaehler02 - 1,5) = sPermanenteID
		Wend
   	End If
   	
   	&apos;Bei Aufgabenstring korrekten Pfad einfügen:
   	for i = 0 to iZaehler02 - 1
   		&apos;String mit korrektem Pfad
   		sAngepassterString = PosUndReplaceVonMystringInSearchstring(sArrayDaten(i,1), &quot;\includegraphics&quot;, sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sArrayDaten(i,0) &amp; &quot;/&quot;)
   		&apos;In Array schreiben:
   		sArrayDaten(i,2) = sAngepassterString
   		&apos;MsgBox sArrayDaten(i,0) &amp; chr(13) &amp; chr(13) &amp; sArrayDaten(i,1) &amp; chr(13) &amp; chr(13) &amp; sArrayDaten(i,2) 
   		
   		&apos;Das gleiche für die Lösungen (nur schreibe ich es nicht mehr in eine neue Spalte des Arrays):
   		sAngepassterString2 = PosUndReplaceVonMystringInSearchstring(sArrayDaten(i,3), &quot;\includegraphics&quot;, sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sArrayDaten(i,0) &amp; &quot;/&quot;)
   		sArrayDaten(i,3) = sAngepassterString2
   		
   		&apos;Das gleiche für die Kurzlösungen (nur schreibe ich es nicht mehr in eine neue Spalte des Arrays):
   		sAngepassterStringKL = PosUndReplaceVonMystringInSearchstring(sArrayDaten(i,4), &quot;\includegraphics&quot;, sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sArrayDaten(i,0) &amp; &quot;/&quot;)
   		sArrayDaten(i,4) = sAngepassterStringKL
   	next i
   	   
	&apos;Datei erstellen_
	&apos; Latexdatei beginnen
	&apos;Headerdatei in String auslesen
	TexHeader = sfDateiInhalt(sHeaderDateiName,iHeaderDateiNummer)
	
	
	&apos;Footerdatei in String auslesen
	TexFooter = sfDateiInhalt(sFooterDateiName,iFooterDateiNummer)
	
	&apos;oKurzLsgJN
	
    Open sAufgabenDateiName For Output As #iAufgabenDateiNummer
	   	Print #iAufgabenDateiNummer, TexHeader &amp; chr(13) &amp; chr(13)  
	   	for i = 0 to iZaehler02 - 1
	   		&apos;String mit korrektem Pfad
	   			if oLsgJN.State = 1 then
	   				if oKurzLsgJN.State = 1 then
	   					Print #iAufgabenDateiNummer, &quot;\item &quot; &amp; sArrayDaten(i,5) &amp; chr(13) &amp; chr(13) &amp; sArrayDaten(i,2) &amp; chr(13) &amp; chr(13)  &amp; &quot;\textbf{L\&quot;&quot;osung:}\\&quot; &amp; chr(13) &amp; sArrayDaten(i,3) &amp; chr(13) &amp; chr(13) &amp; chr(13)  &amp; &quot;\textbf{Kurzl\&quot;&quot;osung:}\\&quot; &amp; chr(13) &amp; sArrayDaten(i,4) &amp; chr(13)&apos;MsgBox &quot;Lösungen werden angezeigt&quot;
	   				else
						Print #iAufgabenDateiNummer, &quot;\item &quot; &amp; sArrayDaten(i,5) &amp; chr(13) &amp; chr(13) &amp; sArrayDaten(i,2) &amp; chr(13) &amp; chr(13)  &amp; &quot;\textbf{L\&quot;&quot;osung:}\\&quot; &amp; chr(13) &amp; sArrayDaten(i,3) &amp; chr(13)&apos;MsgBox &quot;Lösungen werden angezeigt&quot;
					end if	
				else
					if oKurzLsgJN.State = 1 then
						Print #iAufgabenDateiNummer, &quot;\item &quot; &amp; sArrayDaten(i,5) &amp; chr(13) &amp; chr(13) &amp; sArrayDaten(i,2) &amp; chr(13) &amp; chr(13)  &amp; &quot;\textbf{Kurzl\&quot;&quot;osung:}\\&quot; &amp; chr(13) &amp; sArrayDaten(i,4) &amp; chr(13)&apos;MsgBox &quot;Lösungen werden angezeigt&quot;
					else
						Print #iAufgabenDateiNummer, &quot;\item &quot; &amp; sArrayDaten(i,5) &amp; chr(13) &amp; chr(13) &amp; sArrayDaten(i,2) &amp; chr(13) &amp; chr(13)
					end if	
				end if
   		next i
   		Print #iAufgabenDateiNummer, chr(13) &amp; chr(13) &amp; TexFooter     &apos; Save line
	Close #iAufgabenDateiNummer
	
	PdflatexKompilieren(sWorkingDirectory &amp; sTexDateienVerzeichnis, sTexDatei)
	PdfAnzeigen(sWorkingDirectory &amp; sTexDateienVerzeichnis, sTexDatei)
	PdflatexHilfsdateienLoeschen(sWorkingDirectory &amp; sTexDateienVerzeichnis, sTexDatei)
End Sub


Sub TexDateiErstellenAusPruefung
	MsgBox &quot;Die Prüfung wird erstellt.&quot;
	&apos;MarkierteAufgabenZuruecksetzen()
	&apos;Aktuell ausgewählte Prüfung: Aufgaben markieren
	AuswahlPruefungAuslesen()
	
	&apos;Loesungen anzeigen: J/N
	oForm = ThisComponent.drawpage.getForms.GetByName(&quot;MainForm&quot;)
	oLsgJN = oForm.getbyName(&quot;LoesungenJN&quot;)
	
	Dim iAufgabenDateiNummer As Integer
	Dim iHeaderDateiNummer As Integer
	Dim iFooterDateiNummer As Integer
    iAufgabenDateiNummer = FreeFile
    iHeaderDateiNummer = FreeFile
    iFooterDateiNummer = FreeFile
    
   	sWorkingDirectory = sfWorkingDirectory(&quot;aufgdbphys.odb&quot;)
	sTexDateienVerzeichnis = sfAufgabenverzeichnis
	
	sTexDatei = &quot;auswahl_aufgaben&quot;
	&apos;sTexHeader = &quot;headerfooter/header2&quot;
	sTexFooter = &quot;headerfooter/footer&quot;
	sAufgabenDateiName = sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sTexDatei &amp; &quot;.tex&quot;            &apos; Define file name
	&apos;sHeaderDateiName = sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sTexHeader &amp; &quot;.txt&quot;            &apos; Define file name
	sFooterDateiName = sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sTexFooter &amp; &quot;.txt&quot; &apos; Define file name
	&apos;---------------
	Dim DatabaseContext, DataSource, Connection, InteractionHandler, Statement, ResultSet As Object
	Dim iZaehler01,iZaehler02 As Integer
	Dim sID, sAufgabe As String 
	
    &apos;DatenbankKontext erstellen
    DatabaseContext = createUnoService(&quot;com.sun.star.sdb.DatabaseContext&quot;)
    &apos;Datenbank kontaktieren
    DataSource = DatabaseContext.getByName(&quot;aufgdbphys&quot;)
    &apos;Testen, ob Passwort benötigt wird
    If Not DataSource.IsPasswordRequired Then
    	Connection = DataSource.GetConnection(&quot;&quot;,&quot;&quot;)
    Else	
    	InteractionHandler = createUnoService(&quot;com.sun.star.sdb.InteractionHandler&quot;)
    	Connection = DataSource.ConnectWithCompletion(InteractionHandler)
    End If
    &apos;Abfrage erstellen
    Statement = Connection.createStatement()
   &apos;ResultSet = Statement.executeQuery(&quot; SELECT `aufgaben`.`Aufg_ID` AS `Aufg_ID`, `aufgaben`.`AutorID` AS `AutorID`, `aufgaben`.`SchwierigkeitsgradID` AS `SchwierigkeitsgradID`, `aufgaben`.`Untergebiet` AS `Untergebiet`, `aufgaben`.`Aufgabentext` AS `Aufgabentext`, `aufgaben`.`Lösung` AS `Lösung`, `aufgaben`.`LinkBild` AS `LinkBild`, `aufgaben`.`AuswahlDruck` AS `AuswahlDruck`, `aufgaben`.`Position` AS `Position` FROM `ph_aufg_db`.`aufgaben` `aufgaben` WHERE ( aufgaben.AuswahlDruck = true ) ORDER BY `position`&quot;)
    ResultSet = Statement.executeQuery(&quot;SELECT `Aufgaben`.`AufgID` AS `AufgID`, `Aufgaben`.`Fachgebiet` AS `Fachgebiet`, `Aufgaben`.`Author` AS `Author`, `Aufgaben`.`Schwierigkeitsgrad` AS `Schwierigkeitsgrad`, `Aufgaben`.`LetzteAenderung` AS `LetzteAenderung`, `Aufgaben`.`AufgabenText` AS `AufgabenText`, `Aufgaben`.`LinkZuBild` AS `LinkZuBild`, `Aufgaben`.`MC2` AS `MC2`, `Aufgaben`.`MC3` AS `MC3`, `Aufgaben`.`MC4` AS `MC4`, `Aufgaben`.`MC5` AS `MC5`, `Aufgaben`.`MC6` AS `MC6`, `Aufgaben`.`Loesung` AS `Loesung`, `Aufgaben`.`Auswahl` AS `Auswahl`, `Aufgaben`.`Position` AS `Position` FROM `Aufgaben` `Aufgaben` WHERE ( `Aufgaben`.`Auswahl` = True ) ORDER BY `Aufgaben`.`Position`, `Aufgaben`.`Fachgebiet`, `Aufgaben`.`Schwierigkeitsgrad`&quot;)
   
   &apos;Dimension von ResultSet bestimmen:
   iZaehler01 = 0
   	&apos;- Stringarray mit ID und Aufgabe und evtl weiteren Angaben erstellen (zuerst mehrere 1-dim-Array und dann ein 2-dim-Array)
   	If Not IsNull(ResultSet) Then
   		While ResultSet.next
			iZaehler01 = iZaehler01 + 1
			&apos;MsgBox iZaehler01
		Wend
   	End If
   	
   	&apos;Array Dimensionieren:
   	Dim sArrayDaten(iZaehler01 - 1,3) As String
   	
    ResultSet = Statement.executeQuery(&quot;SELECT `Aufgaben`.`AufgID` AS `AufgID`, `Aufgaben`.`Fachgebiet` AS `Fachgebiet`, `Aufgaben`.`Author` AS `Author`, `Aufgaben`.`Schwierigkeitsgrad` AS `Schwierigkeitsgrad`, `Aufgaben`.`LetzteAenderung` AS `LetzteAenderung`, `Aufgaben`.`AufgabenText` AS `AufgabenText`, `Aufgaben`.`LinkZuBild` AS `LinkZuBild`, `Aufgaben`.`MC2` AS `MC2`, `Aufgaben`.`MC3` AS `MC3`, `Aufgaben`.`MC4` AS `MC4`, `Aufgaben`.`MC5` AS `MC5`, `Aufgaben`.`MC6` AS `MC6`, `Aufgaben`.`Loesung` AS `Loesung`, `Aufgaben`.`Auswahl` AS `Auswahl`, `Aufgaben`.`Position` AS `Position` FROM `Aufgaben` `Aufgaben` WHERE ( `Aufgaben`.`Auswahl` = True ) ORDER BY `Aufgaben`.`Position`, `Aufgaben`.`Fachgebiet`, `Aufgaben`.`Schwierigkeitsgrad`&quot;)
   	iZaehler02 = 0
   	If Not IsNull(ResultSet) Then
   		While ResultSet.next
			iZaehler02 = iZaehler02 + 1
			sID = ResultSet.getString(1)
			sAufgabe = ResultSet.getString(6)
			sLoesung = ResultSet.getString(13)
			&apos;MsgBox sLoesung
			&apos;Umlaute ersetzen (unicode vs. ascii-Problematik)
			sAufgabe = Replace(sAufgabe, &quot;ö&quot;, &quot;\&quot;&quot;o&quot;)
			sAufgabe = Replace(sAufgabe, &quot;Ö&quot;, &quot;\&quot;&quot;O&quot;)
			sAufgabe = Replace(sAufgabe, &quot;ä&quot;, &quot;\&quot;&quot;a&quot;)
			sAufgabe = Replace(sAufgabe, &quot;Ä&quot;, &quot;\&quot;&quot;A&quot;)
			sAufgabe = Replace(sAufgabe, &quot;ü&quot;, &quot;\&quot;&quot;u&quot;)
			sAufgabe = Replace(sAufgabe, &quot;Ü&quot;, &quot;\&quot;&quot;U&quot;)
			
			sLoesung = Replace(sLoesung, &quot;ö&quot;, &quot;\&quot;&quot;o&quot;)
			sLoesung = Replace(sLoesung, &quot;Ö&quot;, &quot;\&quot;&quot;O&quot;)
			sLoesung = Replace(sLoesung, &quot;ä&quot;, &quot;\&quot;&quot;a&quot;)
			sLoesung = Replace(sLoesung, &quot;Ä&quot;, &quot;\&quot;&quot;A&quot;)
			sLoesung = Replace(sLoesung, &quot;ü&quot;, &quot;\&quot;&quot;u&quot;)
			sLoesung = Replace(sLoesung, &quot;Ü&quot;, &quot;\&quot;&quot;U&quot;)


			&apos;MsgBox sID &amp; chr(13) &amp; sAufgabe
			&apos;In Array schreiben:
			sArrayDaten(iZaehler02 - 1,0) = sID
			sArrayDaten(iZaehler02 - 1,1) = sAufgabe
			sArrayDaten(iZaehler02 - 1,3) = sLoesung
		Wend
   	End If
   	
   	&apos;Bei Aufgabenstring korrekten Pfad einfügen:
   	for i = 0 to iZaehler02 - 1
   		&apos;String mit korrektem Pfad
   		sAngepassterString = PosUndReplaceVonMystringInSearchstring(sArrayDaten(i,1), &quot;\includegraphics&quot;, sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sArrayDaten(i,0) &amp; &quot;/&quot;)
   		&apos;In Array schreiben:
   		sArrayDaten(i,2) = sAngepassterString
   		&apos;MsgBox sArrayDaten(i,0) &amp; chr(13) &amp; chr(13) &amp; sArrayDaten(i,1) &amp; chr(13) &amp; chr(13) &amp; sArrayDaten(i,2) 
   		
   		&apos;Das gleiche für die Lösungen (nur schreibe ich es nicht mehr in eine neue Spalte des Arrays):
   		sAngepassterString2 = PosUndReplaceVonMystringInSearchstring(sArrayDaten(i,3), &quot;\includegraphics&quot;, sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sArrayDaten(i,0) &amp; &quot;/&quot;)
   		sArrayDaten(i,3) = sAngepassterString2
   	next i
   	   
	&apos;Datei erstellen_
	&apos; Latexdatei beginnen
	&apos;Headerdatei in String auslesen
	&apos;--&gt;TexHeader = sfDateiInhalt(sHeaderDateiName,iHeaderDateiNummer)
	TexHeader = sfErstelleTexHeader()
	
	&apos;Umlaute ersetzen (unicode vs. ascii-Problematik)
	TexHeader = Replace(TexHeader, &quot;ö&quot;, &quot;\&quot;&quot;o&quot;)
	TexHeader = Replace(TexHeader, &quot;Ö&quot;, &quot;\&quot;&quot;O&quot;)
	TexHeader = Replace(TexHeader, &quot;ä&quot;, &quot;\&quot;&quot;a&quot;)
	TexHeader = Replace(TexHeader, &quot;Ä&quot;, &quot;\&quot;&quot;A&quot;)
	TexHeader = Replace(TexHeader, &quot;ü&quot;, &quot;\&quot;&quot;u&quot;)
	TexHeader = Replace(TexHeader, &quot;Ü&quot;, &quot;\&quot;&quot;U&quot;)
	
	&apos;Footerdatei in String auslesen
	TexFooter = sfDateiInhalt(sFooterDateiName,iFooterDateiNummer)
	
    Open sAufgabenDateiName For Output As #iAufgabenDateiNummer
	   	Print #iAufgabenDateiNummer, TexHeader &amp; chr(13) &amp; chr(13)  
	   	for i = 0 to iZaehler02 - 1
	   		&apos;String mit korrektem Pfad
	   			if oLsgJN.State = 1 then
					Print #iAufgabenDateiNummer, &quot;\item &quot; &amp; sArrayDaten(i,2) &amp; chr(13) &amp; chr(13)  &amp; &quot;\textbf{L\&quot;&quot;osung:}\\&quot; &amp; chr(13) &amp; sArrayDaten(i,3) &amp; chr(13)&apos;MsgBox &quot;Lösungen werden angezeigt&quot;
				else
					Print #iAufgabenDateiNummer, &quot;\item &quot; &amp; sArrayDaten(i,2) &amp; chr(13) &amp; chr(13)
				end if
   		next i
   		Print #iAufgabenDateiNummer, chr(13) &amp; chr(13) &amp; TexFooter     &apos; Save line
	Close #iAufgabenDateiNummer
	
	PdflatexKompilieren(sWorkingDirectory &amp; sTexDateienVerzeichnis, sTexDatei)
	PdfAnzeigen(sWorkingDirectory &amp; sTexDateienVerzeichnis, sTexDatei)
	PdflatexHilfsdateienLoeschen(sWorkingDirectory &amp; sTexDateienVerzeichnis, sTexDatei)
End Sub

Sub TexDateiErstellenAktuelleIDv2
	&apos;&apos;wie TexDateiErstellenAktuelleID aber zuerst Aufgabenstring anpassen und dann Datei erstellen
End Sub

Sub TexDateiErstellenAktuelleIDAufgabe
	&apos;Aktuelle ID bestimmen:
	sID = sfAusgabeID() &apos; Aufruf von Funktion sfAusgabeID()
	&apos;Aufgabeninhaltauslesen
	sAufgabe = sfAusgabeAufgabe()
	sLoesung = sfAusgabeLoesung()
	&apos;&apos;Loesungen anzeigen: J/N
	&apos;oForm = ThisComponent.drawpage.getForms.GetByName(&quot;MainForm&quot;)
	&apos;oLsgJN = oForm.getbyName(&quot;LoesungenJN&quot;)
	
	&apos;MsgBox sID &amp; &quot; &quot; &amp; sAufgabe
	sWorkingDirectory=sfWorkingDirectory(&quot;aufgdbphys.odb&quot;)
	sTexDateienVerzeichnis = sfAufgabenverzeichnis
	sHeaderDateiName = sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/headerfooter/headereinzelneaufgabe01.tex&quot;
	sFooterDateiName = sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/headerfooter/footer.tex&quot;
	sAufgabenDateiName = sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sID &amp; &quot;/aufgabe.tex&quot;
	&apos;TexDatei im ID Ordner erstellen
	ErstelleTexDatei(sHeaderDateiName,sFooterDateiName,sAufgabenDateiName,sID,sAufgabe)
	&apos;TeX-Datei in String auslesen
	
	sStringTexDatei = sTextAuslesenString(sAufgabenDateiName)
		
	&apos;Pfad zur Graphik anpassen
	sAngepassterString = PosUndReplaceVonMystringInSearchstring(sStringTexDatei, &quot;\includegraphics&quot;, sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sID &amp; &quot;/&quot;)
		
	&apos;Umlaute ersetzen (unicode vs. ascii-Problematik)
	sAngepassterString = Replace(sAngepassterString, &quot;ö&quot;, &quot;\&quot;&quot;o&quot;)
	sAngepassterString = Replace(sAngepassterString, &quot;Ö&quot;, &quot;\&quot;&quot;O&quot;)
	sAngepassterString = Replace(sAngepassterString, &quot;ä&quot;, &quot;\&quot;&quot;a&quot;)
	sAngepassterString = Replace(sAngepassterString, &quot;Ä&quot;, &quot;\&quot;&quot;A&quot;)
	sAngepassterString = Replace(sAngepassterString, &quot;ü&quot;, &quot;\&quot;&quot;u&quot;)
	sAngepassterString = Replace(sAngepassterString, &quot;Ü&quot;, &quot;\&quot;&quot;U&quot;)
		
	sTextEinlesenString(sAufgabenDateiName, sAngepassterString)

	PdflatexKompilieren(sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sID, &quot;aufgabe&quot;)
	PdfAnzeigen(sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sID, &quot;aufgabe&quot;)
	PdfToPng(sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sID, &quot;aufgabe&quot;)
	PdflatexHilfsdateienLoeschen(sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sID, &quot;aufgabe&quot;)
	&apos;Schreiben des Pfades der png-Datei in die Datenbank &quot;LinkZuBild&quot;
	
	&apos;---neu START 9.9.13
	&apos;alt:
	&apos;PfadZuBildSetzen(convertfromurl(sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sID &amp; &quot;/aufgabe.jpg&quot;),cint(sID))
	&apos;neu:
	PfadZuBildSetzen(sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sID &amp; &quot;/aufgabe.jpg&quot;,cint(sID))
	&apos;---neu END 9.9.13
	
	&apos;&apos;bild aus pfad anzeigen
	&apos;***********
	&apos;AufgabeSpeichern()
End Sub

Sub TexDateiErstellenAktuelleIDLoesung
	&apos;Aktuelle ID bestimmen:
	sID = sfAusgabeID() &apos; Aufruf von Funktion sfAusgabeID()
	&apos;Aufgabeninhaltauslesen
	sAufgabe = sfAusgabeAufgabe()
	sLoesung = sfAusgabeLoesung()
	&apos;&apos;Loesungen anzeigen: J/N
	&apos;oForm = ThisComponent.drawpage.getForms.GetByName(&quot;MainForm&quot;)
	&apos;oLsgJN = oForm.getbyName(&quot;LoesungenJN&quot;)
	
	&apos;MsgBox sID &amp; &quot; &quot; &amp; sAufgabe
	sWorkingDirectory=sfWorkingDirectory(&quot;aufgdbphys.odb&quot;)
	sTexDateienVerzeichnis = sfAufgabenverzeichnis
	sHeaderDateiName = sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/headerfooter/headereinzelneaufgabe01.tex&quot;
	sFooterDateiName = sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/headerfooter/footer.tex&quot;
	sAufgabenDateiName = sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sID &amp; &quot;/loesung.tex&quot;
	&apos;TexDatei im ID Ordner erstellen
	ErstelleTexDatei(sHeaderDateiName,sFooterDateiName,sAufgabenDateiName,sID,sLoesung)
	&apos;TeX-Datei in String auslesen
	
	sStringTexDatei = sTextAuslesenString(sAufgabenDateiName)
	&apos;MsgBox sStringTexDatei
	
	&apos;Pfad zur Graphik anpassen
	sAngepassterString = PosUndReplaceVonMystringInSearchstring(sStringTexDatei, &quot;\includegraphics&quot;, sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sID &amp; &quot;/&quot;)
	
	&apos;Umlaute ersetzen (unicode vs. acsii-Problematik)
	sAngepassterString = Replace(sAngepassterString, &quot;ö&quot;, &quot;\&quot;&quot;o&quot;)
	sAngepassterString = Replace(sAngepassterString, &quot;Ö&quot;, &quot;\&quot;&quot;O&quot;)
	sAngepassterString = Replace(sAngepassterString, &quot;ä&quot;, &quot;\&quot;&quot;a&quot;)
	sAngepassterString = Replace(sAngepassterString, &quot;Ä&quot;, &quot;\&quot;&quot;A&quot;)
	sAngepassterString = Replace(sAngepassterString, &quot;ü&quot;, &quot;\&quot;&quot;u&quot;)
	sAngepassterString = Replace(sAngepassterString, &quot;Ü&quot;, &quot;\&quot;&quot;U&quot;)
		
	sTextEinlesenString(sAufgabenDateiName, sAngepassterString)

	PdflatexKompilieren(sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sID, &quot;loesung&quot;)
	PdfAnzeigen(sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sID, &quot;loesung&quot;)
	PdflatexHilfsdateienLoeschen(sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sID, &quot;loesung&quot;)
	&apos;AufgabeSpeichern()
End Sub

Sub TexDateiErstellenAktuelleIDKurzLoesung
	&apos;Aktuelle ID bestimmen:
	sID = sfAusgabeID() &apos; Aufruf von Funktion sfAusgabeID()
	&apos;Aufgabeninhaltauslesen
	sAufgabe = sfAusgabeAufgabe()
	sLoesung = sfAusgabeLoesung()
	sKurzLoesung = sfAusgabeKurzLoesung()
	&apos;&apos;Loesungen anzeigen: J/N
	&apos;oForm = ThisComponent.drawpage.getForms.GetByName(&quot;MainForm&quot;)
	&apos;oLsgJN = oForm.getbyName(&quot;LoesungenJN&quot;)
	
	&apos;MsgBox sID &amp; &quot; &quot; &amp; sAufgabe
	sWorkingDirectory=sfWorkingDirectory(&quot;aufgdbphys.odb&quot;)
	sTexDateienVerzeichnis = sfAufgabenverzeichnis
	sHeaderDateiName = sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/headerfooter/headereinzelneaufgabe01.tex&quot;
	sFooterDateiName = sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/headerfooter/footer.tex&quot;
	sAufgabenDateiName = sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sID &amp; &quot;/kurzloesung.tex&quot;
	&apos;TexDatei im ID Ordner erstellen
	ErstelleTexDatei(sHeaderDateiName,sFooterDateiName,sAufgabenDateiName,sID,sKurzLoesung)
	&apos;TeX-Datei in String auslesen
	
	sStringTexDatei = sTextAuslesenString(sAufgabenDateiName)
	&apos;MsgBox sStringTexDatei
	
	&apos;Pfad zur Graphik anpassen
	sAngepassterString = PosUndReplaceVonMystringInSearchstring(sStringTexDatei, &quot;\includegraphics&quot;, sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sID &amp; &quot;/&quot;)
	
	&apos;Umlaute ersetzen (unicode vs. acsii-Problematik)
	sAngepassterString = Replace(sAngepassterString, &quot;ö&quot;, &quot;\&quot;&quot;o&quot;)
	sAngepassterString = Replace(sAngepassterString, &quot;Ö&quot;, &quot;\&quot;&quot;O&quot;)
	sAngepassterString = Replace(sAngepassterString, &quot;ä&quot;, &quot;\&quot;&quot;a&quot;)
	sAngepassterString = Replace(sAngepassterString, &quot;Ä&quot;, &quot;\&quot;&quot;A&quot;)
	sAngepassterString = Replace(sAngepassterString, &quot;ü&quot;, &quot;\&quot;&quot;u&quot;)
	sAngepassterString = Replace(sAngepassterString, &quot;Ü&quot;, &quot;\&quot;&quot;U&quot;)
		
	sTextEinlesenString(sAufgabenDateiName, sAngepassterString)

	PdflatexKompilieren(sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sID, &quot;kurzloesung&quot;)
	PdfAnzeigen(sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sID, &quot;kurzloesung&quot;)
	PdflatexHilfsdateienLoeschen(sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sID, &quot;kurzloesung&quot;)
	&apos;AufgabeSpeichern()
End Sub

Sub TexDateiErstellenAktuelleID
	AufgabeSpeichern()
	TexDateiErstellenAktuelleIDAufgabe
	TexDateiErstellenAktuelleIDLoesung
	TexDateiErstellenAktuelleIDKurzLoesung
End Sub

Function PosUndReplaceVonMystringInSearchstring(sMystring, sSearchstring, sDateiPfad As String)
	sZwischenspeicher = sMystring
	dim iArrayPosition(20) As Integer
	dim sBildName(20) As String
	&apos;Laenge sMystring bestimmen:
	sLaengeMyString = Len(sMystring)
	
	iLoops = 1
	iBuchstabenzaehler = 1
	Do Until iBuchstabenzaehler &gt; sLaengeMyString
		&apos;bestimme Position von sSearchstring in sMystring
		ResultString = InStr(iBuchstabenzaehler, sMystring, sSearchstring)
		If ResultString = 0 Then
			Exit Do
		End If	
		&apos;Zeige Position an
		&apos;MsgBox &quot;Position: &quot; &amp; ResultString
		&apos;Trage Ergebnis im Array iArrayPosition an der Position iLoops ein
		iArrayPosition(iLoops-1) = ResultString
		&apos;MsgBox &quot;Loops: &quot; &amp; iLoops
		iLoops = iLoops + 1
		iBuchstabenzaehler = ResultString + 1
	Loop
	
	For i = 0 to ubound(iArrayPosition())
		If iArrayPosition(i) = 0 Then
			Exit For
		End If	
		&apos;MsgBox &quot;Loop: &quot;&amp; i &amp; &quot;; Inhalt: &quot; &amp; iArrayPosition(i)
				&apos;Position der geschweiftenn Klammern bestimmen
		iPosGeschwKlammerLinks = InStr(iArrayPosition(i),sMystring , &quot;{&quot;)
		iPosGeschwKlammerRechts = InStr(iArrayPosition(i),sMystring , &quot;}&quot;)
		&apos;MsgBox &quot;Links: &quot; &amp; iPosGeschwKlammerLinks &amp; &quot; Rechts: &quot; &amp; iPosGeschwKlammerRechts
		sBildName(i) = Mid(sMystring, iPosGeschwKlammerLinks + 1, iPosGeschwKlammerRechts - iPosGeschwKlammerLinks - 1)
		&apos;MsgBox sBildName(i)
		&apos;Ausdruck ersetzen
		&apos;MsgBox convertfromurl(sDateiPfad)
		&apos;MsgBox sMystring
		sMystringLeft = Left(sMystring, iPosGeschwKlammerLinks)
		&apos;MsgBox sMystringLeft
		
		&apos;--- neu START 9.9.13
		if afSystemeinstellungen(1) = 1 then
			sMystringMitte = convertfromurl(sDateiPfad) &amp; sBildName(i)
		elseif afSystemeinstellungen(1) = 2 then
			sMystringMitte = convertfromurl(sDateiPfad) &amp; sBildName(i)
		elseif afSystemeinstellungen(1) = 3 then
			sMystringMitte = convertfromurl(sDateiPfad) &amp; sBildName(i)
			&apos;in Windows ist der absolute TEX-Pfad C:/User/bieri/bild.png
			&apos;man beachte: Slash ANSTATT Backslash!!!!
			&apos;Backslash ist schon durch TEX besetzt !
			sMystringMitte = Replace(sMystringMitte, &quot;\&quot;, &quot;/&quot;)
		end if
		&apos;MsgBox sMystringMitte
		&apos;--- neu END 9.9.13
		
		sMystringRight = Right(sMystring, sLaengeMyString - iPosGeschwKlammerRechts +1)
		&apos;MsgBox sMystringRight
		
		sMystring = sMystringLeft &amp; sMystringMitte &amp; sMystringRight
		&apos;MsgBox sMystring
		
		&apos;Bestimme Länge von alten und ersetzten String
		iLaengeBildNameAlt = Len(sBildName(i))
		iLaengeBildNameNeu = Len(convertfromurl(sDateiPfad) &amp; sBildName(i))
		&apos;Neuer Pfad hat also
		iDiffZeichen = iLaengeBildNameNeu - iLaengeBildNameAlt
		&apos;mehr, diese muss man bei den Einträgen i+1 dazuzaehlen:
		If iArrayPosition(i+1) = 0 Then
			Exit For
		Else
			iArrayPosition(i+1) = iArrayPosition(i+1) + iDiffZeichen
			&apos;Laenge Neu bestimmen:
			sLaengeMyString = Len(sMystring)
		End If
	Next i
	PosUndReplaceVonMystringInSearchstring = sMystring
	&apos;Originalstring herstellen
	sMystring = sZwischenspeicher
End Function

Function sTextAuslesenString(sFilename As String) As String 
	Dim iFileNo As Integer
	Dim sCurrentLine As String
	
	&apos; Establish free file handle
	iFileNo = Freefile
	
	&apos;sFilename = sFilenameB
	&apos;&apos;sFilename = convertfromurl(sFilenameB)
	
	&apos;MsgBox sFilename
	&apos; Open file (reading mode)
	Open sFilename For Input As iFileNo

	&apos; Check whether file end has been reached
	Do While not eof(iFileNo)
		&apos; Read line
		Line Input #iFileNo, sCurrentLine
		If sCurrentLine &lt;&gt;&quot;&quot; then
			sTextAuslesenString = sTextAuslesenString &amp; sCurrentLine &amp; Chr(13)
		end if
	Loop
	
	&apos; Close file
	Close #iFileNo
End Function

Sub sTextEinlesenString(sFilename, sString As String)
	Dim iFileNo As Integer
	Dim sCurrentLine As String
	
	&apos; Establish free file handle
	iFileNo = Freefile
	
	&apos;sFilename = sFilenameB
	&apos;&apos;sFilename = convertfromurl(sFilenameB)
	
	&apos;MsgBox sFilename
	&apos; Open file (reading mode)
	Open sFilename For Output As #iFileNo
	
	Print #iFileNo, sString
	
	&apos; Close file
	Close #iFileNo
End Sub

Sub PfadZuBildSetzen(sPfadZuBild As String, iAufgabenID As Integer)
&apos;Sub PfadZuBildSetzen
	Dim DatabaseContext As Object
	Dim DataSource As Object
	Dim Connection As Object
	Dim InteractionHandler as Object
	Dim Statement As Object
    Dim ResultSet As Object
    &apos;Dim UnterGebiet As Integer
	DatabaseContext = createUnoService(&quot;com.sun.star.sdb.DatabaseContext&quot;)
	DataSource = DatabaseContext.getByName(&quot;aufgdbphys&quot;)
	If Not DataSource.IsPasswordRequired Then
   	    Connection = DataSource.GetConnection(&quot;&quot;,&quot;&quot;)
    Else
       InteractionHandler = createUnoService(&quot;com.sun.star.sdb.InteractionHandler&quot;)
       Connection = DataSource.ConnectWithCompletion(InteractionHandler)
    End If
    Statement = Connection.createStatement()
	&apos;   ResultSet = Statement.executeQuery(&quot; SELECT &quot;&quot;aufgaben.Aufg_ID&quot;&quot; FROM &quot;&quot;aufgaben&quot;&quot; WHERE &quot;&quot;aufgaben.Untergebiet&quot;&quot; = &apos;1&apos; &quot;)
	&apos;UPDATE &quot;Aufgaben&quot; SET &quot;LinkZuBild&quot; = &apos;\media&apos; WHERE &quot;AufgID&quot; = 4
 	&apos;Statement.executeUpdate(&quot;UPDATE &quot;&quot;Aufgaben&quot;&quot; SET &quot;&quot;LinkZuBild&quot;&quot; = &apos;1&apos; &quot;)&apos; WHERE (`Aufgaben`.`ID` = 2) &quot;)
 	&apos;Statement.executeUpdate(&quot;UPDATE &quot;&quot;Aufgaben&quot;&quot; SET &quot;&quot;LinkZuBild&quot;&quot; = &apos;4&apos; WHERE (&quot;&quot;AufgID&quot;&quot; = 2) &quot;)
 	sAbfrage = &quot;UPDATE &quot;&quot;Aufgaben&quot;&quot; SET &quot;&quot;LinkZuBild&quot;&quot; = &apos;&quot; &amp; sPfadZuBild &amp; &quot;&apos; WHERE  (&quot;&quot;AufgID&quot;&quot; = &quot; &amp; iAufgabenID &amp; &quot;) &quot;
 	Statement.executeUpdate(sAbfrage)
End Sub

Function ErstelleTexDatei(sHeaderDateiName,sFooterDateiName,sAufgabenDateiName,sID,sAufgabe As String)
	Dim iAufgabenDateiNummer,iHeaderDateiNummer,iFooterDateiNummer As Integer
    iAufgabenDateiNummer = FreeFile
    iHeaderDateiNummer = FreeFile
    iFooterDateiNummer = FreeFile
	&apos;Headerdatei in String auslesen
	TexHeader = sfDateiInhalt(sHeaderDateiName,iHeaderDateiNummer)
	&apos;Footerdatei in String auslesen
	TexFooter = sfDateiInhalt(sFooterDateiName,iFooterDateiNummer)
	        
   If Not IsNull(ResultSet) Then
       &apos; Latexdatei beginnen
        Open sAufgabenDateiName For Output As #iAufgabenDateiNummer
	   	Print #iAufgabenDateiNummer, TexHeader &amp; chr(13) &amp; chr(13)      &apos; Save line
		Close #iAufgabenDateiNummer

	&apos;	While ResultSet.next
			&apos;	MsgBox ResultSet.getString(7)
			Open sAufgabenDateiName For Append As #iAufgabenDateiNummer         &apos; Open file (writing mode)
			&apos;	Open Filename For Output As #FileNo         &apos; Open file (writing mode)
			Print #iAufgabenDateiNummer, sAufgabe &amp; chr(13) &amp; chr(13)    
			Close #iAufgabenDateiNummer
	&apos;	Wend
	    &apos; Latex-datei beenden  
		Open sAufgabenDateiName For Append As #iAufgabenDateiNummer
		Print #iAufgabenDateiNummer, chr(13) &amp; chr(13) &amp; TexFooter     &apos; Save line
		Close #iAufgabenDateiNummer
    End If    
End Function

Function sfAusgabeID &apos;Wird diese Funktion von einem Formular aufgerufen, so gibt sie die ID der angezeigten Aufgabe zurück
	odoc=thiscomponent
	oform=odoc.drawpage.forms.getbyindex(0)
	sfAusgabeID = oform.getstring(1)
	&apos;MsgBox sfAusgabeID
End Function

Function sfAusgabeAufgabe &apos;Wird diese Funktion von einem Formular aufgerufen, so gibt sie den Inhalt der angezeigten Aufgabe zurück
	odoc=thiscomponent
	oform=odoc.drawpage.forms.getbyindex(0)
	sfAusgabeAufgabe = oform.getstring(6)
	&apos;MsgBox sfAusgabeID
End Function

Function sfAusgabeLoesung &apos;Wird diese Funktion von einem Formular aufgerufen, so gibt sie die Lösung der angezeigten Aufgabe zurück
	odoc=thiscomponent
	oform=odoc.drawpage.forms.getbyindex(0)
	sfAusgabeLoesung = oform.getstring(13)
	&apos;MsgBox sfAusgabeLoesung
End Function

Function sfAusgabeKurzLoesung &apos;Wird diese Funktion von einem Formular aufgerufen, so gibt sie die Lösung der angezeigten Aufgabe zurück
	odoc=thiscomponent
	oform=odoc.drawpage.forms.getbyindex(0)
	sfAusgabeKurzLoesung = oform.getstring(18)
	&apos;MsgBox sfAusgabeKurzLoesung
End Function

Function sfAusgabePruefung &apos;Wird diese Funktion von einem Formular aufgerufen, so gibt sie den Name der angezeigten Prüefung zurück
	odoc=thiscomponent
	oform=odoc.drawpage.forms.getbyindex(1)
	sfAusgabePruefung = oform.getstring(2)
	&apos;MsgBox sfAusgabeID
End Function

Sub FileManagerOeffnen(sVerzeichnis As String)
	&apos;MsgBox convertfromurl(sVerzeichnis)
	&apos;Testen, welches Betriebssystem (in Function afSystemeinstellungen eingestellt!):
	if afSystemeinstellungen(1) = 1 then
		shell(&quot;xdg-open &quot; &amp; convertfromurl(sVerzeichnis),10)
	elseif afSystemeinstellungen(1) = 2 then
		shell(&quot;open &quot; &amp; convertfromurl(sVerzeichnis),10)
	&apos;neu START 9.8.13
	elseif afSystemeinstellungen(1) = 3 then
		shell(&quot;explorer &quot; &amp; convertfromurl(sVerzeichnis),10)
	&apos;neu END 9.8.13
	end if
End Sub	
</script:module>