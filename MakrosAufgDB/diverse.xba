<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="diverse" script:language="StarBasic">REM  *****  BASIC  *****

Sub Main
	
End Sub

Sub BeiIDVariantenPermanenteIDEinsetzen ()
	&apos;Rückfrage
	rueckgabe = MsgBox(&quot;Möchten Sie wirklich bei allen ID-VArianten die permanente ID einsetzen&quot;,1)
	if rueckgabe = 2 then
		MsgBox &quot;Abbruch!&quot;
		exit sub
	end if
	
	&apos;StatusBar:
	oStatus = ThisComponent.CurrentController.StatusIndicator
	
	&apos;Alle ausgewählten Aufgaben in Resultset auslesen:
	Dim DatabaseContext, DataSource, Connection, InteractionHandler, Statement, ResultSet As Object	
	&apos;DatenbankKontext erstellen
    DatabaseContext = createUnoService(&quot;com.sun.star.sdb.DatabaseContext&quot;)
    &apos;Datenbank kontaktieren
    DataSource = DatabaseContext.getByName(&quot;aufgdbphys&quot;)
    &apos;Testen, ob Passwort benötigt wird
    If Not DataSource.IsPasswordRequired Then
    	Connection = DataSource.GetConnection(&quot;&quot;,&quot;&quot;)
    Else	
    	InteractionHandler = createUnoService(&quot;com.sun.star.sdb.InteractionHandler&quot;)
    	Connection = DataSource.ConnectWithCompletion(InteractionHandler)
    End If
    &apos;Abfrage erstellen
    Statement = Connection.createStatement()
    StatementUpdate = Connection.createStatement()
	ResultSet = Statement.executeQuery(&quot;SELECT * FROM `Aufgaben` WHERE ( `Aufgaben`.`Auswahl` = True )&quot;)
	
	&apos;alle Aufgaben durchgehen
	&apos;wenn IDVariante &lt;&gt; NULL, dann in zwei Arrays einlesen
	&apos;1 Array: ID
	&apos;2. Array: IDVarianten
	&apos;3. Array: IDVariantePermanenteID
	Dim saID(1) As String
	Dim saIDVarianten(1) As String
	Dim saIDVariantePermanenteID(1) As String
	Dim iZaehler As Integer
	
	iZaehler = 0
	
	If Not IsNull(ResultSet) Then
   		While ResultSet.next
   			if(ResultSet.getString(17) &lt;&gt; &quot;&quot;) then
				saID(iZaehler) = DeleteStr(ResultSet.getString(1),&quot; &quot;)	
				saIDVarianten(iZaehler) = DeleteStr(ResultSet.getString(17),&quot; &quot;)
				
				&apos;MsgBox saID(iZaehler) &amp; &quot; &quot; &amp; saIDVarianten(iZaehler)
				
				iZaehler = iZaehler + 1
				ReDim Preserve saID(iZaehler+1)
				ReDim Preserve saIDVarianten(iZaehler+1)
				ReDim Preserve saIDVariantePermanenteID(iZaehler+1)
			end if
		Wend
	Else
		MsgBox &quot;Es gibt keine ausgewählten Aufgaben.&quot;
   		Exit Sub
	End If
	
	&apos;Alle Aufgaben durchgehen
	
	&apos;Array saIDVarianten() durchgehen und passende PermanenteID raussuchen und in saIDVariantePermanenteID speichern:
	for i = 0 to ubound(saIDVarianten())-1
		ResultSet = Statement.executeQuery(&quot;SELECT * FROM `Aufgaben` WHERE ( `Aufgaben`.`Auswahl` = True )&quot;)
		If Not IsNull(ResultSet) Then
   			While ResultSet.next
   				if(DeleteStr(ResultSet.getString(1),&quot; &quot;) = DeleteStr(saIDVarianten(i),&quot; &quot;)) then
					saIDVariantePermanenteID(i) = DeleteStr(ResultSet.getString(22),&quot; &quot;)
				end if
				Wend
		Else
				MsgBox &quot;Es gibt keine ausgewählten Aufgaben.&quot;
   				Exit Sub
		End If	
		&apos;msgbox i
	next
	
	&apos;for i = 0 to ubound(saIDVarianten())-2
	&apos;	msgbox &quot;a &quot; &amp; saID(i) &amp; &quot; &quot; &amp; saIDVarianten(i) &amp; &quot; &quot; &amp; saIDVariantePermanenteID(i)
	&apos;next
	
	oStatus.start(&quot;Bitte warten ...&quot;, 1)
	j = 0
	&apos;Entsprechende Permanente ID in IDVariante schreiben
	ResultSet = Statement.executeQuery(&quot;SELECT * FROM `Aufgaben` WHERE ( `Aufgaben`.`Auswahl` = True )&quot;)
	If Not IsNull(ResultSet) Then
   		While ResultSet.next
   		if(ResultSet.getString(17) &lt;&gt; &quot;&quot;) then
   			for i = 0 to ubound(saID())-1
   				if(DeleteStr(ResultSet.getString(1),&quot; &quot;) = DeleteStr(saID(i),&quot; &quot;)) then
					&apos;msgbox &quot;b &quot; &amp; DeleteStr(ResultSet.getString(1),&quot; &quot;) &amp; &quot; &quot; &amp; DeleteStr(saID(i),&quot; &quot;) &amp; &quot; &quot; &amp; saIDVariantePermanenteID(i)
					sSQL = &quot;UPDATE &quot;&quot;Aufgaben&quot;&quot; SET &quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;IDVarianten&quot;&quot; = &apos;&quot; &amp; saIDVariantePermanenteID(i) &amp; &quot;&apos; WHERE (&quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;AufgID&quot;&quot; = &quot; &amp;ResultSet.getString(1) &amp; &quot;) &quot;
	 				&apos;MsgBox sSQL
	 				StatementUpdate.executeUpdate(sSQL)
				end if
			next
		end if	
			j = j+1
			oStatus.text = j
		Wend	
	Else
		MsgBox &quot;Es gibt keine ausgewählten Aufgaben.&quot;
   		Exit Sub
	End If	
	
	oStatus.end

End Sub

Sub AlteIDinPermanenteIDkopieren()
	&apos;Zu bearbeitende Aufgaben auswählen!
	rueckgabe = MsgBox(&quot;Wurden die zu bearbeitenden Aufgaben ausgewählt?&quot;,1)
	if rueckgabe = 2 then
		MsgBox &quot;Abbruch!&quot;
		exit sub
	end if
	
	&apos;Alle ausgewählten Aufgaben in Resultset auslesen:
	Dim DatabaseContext, DataSource, Connection, InteractionHandler, Statement, ResultSet As Object	
	&apos;DatenbankKontext erstellen
    DatabaseContext = createUnoService(&quot;com.sun.star.sdb.DatabaseContext&quot;)
    &apos;Datenbank kontaktieren
    DataSource = DatabaseContext.getByName(&quot;aufgdbphys&quot;)
    &apos;Testen, ob Passwort benötigt wird
    If Not DataSource.IsPasswordRequired Then
    	Connection = DataSource.GetConnection(&quot;&quot;,&quot;&quot;)
    Else	
    	InteractionHandler = createUnoService(&quot;com.sun.star.sdb.InteractionHandler&quot;)
    	Connection = DataSource.ConnectWithCompletion(InteractionHandler)
    End If
    &apos;Abfrage erstellen
    Statement = Connection.createStatement()
    StatementUpdate = Connection.createStatement()
	ResultSet = Statement.executeQuery(&quot;SELECT * FROM `Aufgaben` WHERE ( `Aufgaben`.`Auswahl` = True )&quot;)

	If Not IsNull(ResultSet) Then
   		While ResultSet.next
			sIDalt = ResultSet.getString(20)
			&apos;MsgBox sID
			sSQL = &quot;UPDATE &quot;&quot;Aufgaben&quot;&quot; SET &quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;PermanenteID&quot;&quot; = &apos;&quot; &amp; sIDalt &amp; &quot;&apos; WHERE (&quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;AufgID&quot;&quot; = &quot; &amp;ResultSet.getString(1) &amp; &quot;) &quot;
	 		&apos;MsgBox sSQL
	 		StatementUpdate.executeUpdate(sSQL)
		Wend
	Else
		MsgBox &quot;Es gibt keine ausgewählten Aufgaben.&quot;
   		Exit Sub
	End If	
	MsgBox &quot;Makro AlteIDinPermanenteIDkopieren() ist beendet.&quot;
End Sub

Sub AlteIDAendern
	&apos;Zu bearbeitende Aufgaben auswählen!
	rueckgabe = MsgBox(&quot;Wurden die zu bearbeitenden Aufgaben ausgewählt?&quot;,1)
	if rueckgabe = 2 then
		MsgBox &quot;Abbruch!&quot;
		exit sub
	end if
	sKuerzel = InputBox(&quot;Bitte Kürzel eingeben!&quot;)
	MsgBox sKuerzel
	
	&apos;Alle Aufgaben in Resultset auslesen:
	Dim DatabaseContext, DataSource, Connection, InteractionHandler, Statement, ResultSet As Object	
	&apos;DatenbankKontext erstellen
    DatabaseContext = createUnoService(&quot;com.sun.star.sdb.DatabaseContext&quot;)
    &apos;Datenbank kontaktieren
    DataSource = DatabaseContext.getByName(&quot;aufgdbphys&quot;)
    &apos;Testen, ob Passwort benötigt wird
    If Not DataSource.IsPasswordRequired Then
    	Connection = DataSource.GetConnection(&quot;&quot;,&quot;&quot;)
    Else	
    	InteractionHandler = createUnoService(&quot;com.sun.star.sdb.InteractionHandler&quot;)
    	Connection = DataSource.ConnectWithCompletion(InteractionHandler)
    End If
    &apos;Abfrage erstellen
    Statement = Connection.createStatement()
    StatementUpdate = Connection.createStatement()
	ResultSet = Statement.executeQuery(&quot;SELECT * FROM `Aufgaben` WHERE ( `Aufgaben`.`Auswahl` = True )&quot;)

	If Not IsNull(ResultSet) Then
   		While ResultSet.next
			sID = ResultSet.getString(20)
			&apos;MsgBox sID
			sSQL = &quot;UPDATE &quot;&quot;Aufgaben&quot;&quot; SET &quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;Alte ID&quot;&quot; = &apos;&quot; &amp; sID &amp; &quot;-&quot; &amp; sKuerzel &amp; &quot;&apos; WHERE (&quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;AufgID&quot;&quot; = &quot; &amp;ResultSet.getString(1) &amp; &quot;) &quot;
	 		&apos;MsgBox sSQL
	 		StatementUpdate.executeUpdate(sSQL)
		Wend
	Else
		MsgBox &quot;Es gibt keine ausgewählten Aufgaben.&quot;
   		Exit Sub
	End If
	
End Sub

Sub PermanenteIDsetzen
	Dim iHoechsteID As Integer 
	Dim iLaufendeID As Integer 
	iHoechsteID = 0
	iLaufendeID = 0
	
	&apos;Autor in Einstellungen auslesen:
	sIDAutorInEinstellungen = sfAutor()
	MsgBox &quot;Der in den Einstellungen gewählte Autor: &quot; &amp; sIDAutorInEinstellungen
	
	&apos;Möglichkeit, den Makro abzubrechen:
	rueckgabe = MsgBox(&quot;Willst Du wirklich für alle Aufgaben des Autors &quot; &amp; sIDAutorInEinstellungen &amp; &quot; eine permanente ID setzen?&quot;,1)
	if rueckgabe = 2 then
		MsgBox &quot;Abbruch! Es wird keine permanente ID gesetzt.&quot;
		exit sub
	end if

	&apos;Alle markierten Aufgaben zuruecksetzen:
	&apos;MarkierteAufgabenZuruecksetzen
	
	&apos;Alle Aufgaben in Resultset auslesen:
	Dim DatabaseContext, DataSource, Connection, InteractionHandler, Statement, ResultSet As Object	
	&apos;DatenbankKontext erstellen
    DatabaseContext = createUnoService(&quot;com.sun.star.sdb.DatabaseContext&quot;)
    &apos;Datenbank kontaktieren
    DataSource = DatabaseContext.getByName(&quot;aufgdbphys&quot;)
    &apos;Testen, ob Passwort benötigt wird
    If Not DataSource.IsPasswordRequired Then
    	Connection = DataSource.GetConnection(&quot;&quot;,&quot;&quot;)
    Else	
    	InteractionHandler = createUnoService(&quot;com.sun.star.sdb.InteractionHandler&quot;)
    	Connection = DataSource.ConnectWithCompletion(InteractionHandler)
    End If
    &apos;Abfrage erstellen
    Statement = Connection.createStatement()
    StatementUpdate = Connection.createStatement()
	ResultSet = Statement.executeQuery(&quot;SELECT * FROM `Aufgaben`&quot;)
	
	&apos;Falls PermanenteID mit -1- anfängt, -1- enfernen, höchste iLaufendeID in iHoechsteID zwischen speichern
	&apos;So wird die höchste ID bestimmt.
	If Not IsNull(ResultSet) Then
   		While ResultSet.next
			sID = ResultSet.getString(22)
			&apos;MsgBox sID
			if left(sID,2) = sIDAutorInEinstellungen &amp;&quot;-&quot; then
				iLaufendeID = cint(Mid(sID,3,len(sID)-2))
				if iHoechsteID &lt; iLaufendeID then
					iHoechsteID = iLaufendeID
				end if
			end if
			&apos;Neu 24.9.15 (Bi): Ab Bischoff sind die IDs der Benutzer 2stellig!
			if left(sID,3) = sIDAutorInEinstellungen &amp;&quot;-&quot; then
				iLaufendeID = cint(Mid(sID,4,len(sID)-2))
				if iHoechsteID &lt; iLaufendeID then
					iHoechsteID = iLaufendeID
				end if
			end if
			&apos;ENDE Neu 24.9.15
		Wend
		MsgBox &quot;Höchste ID: &quot; &amp; iHoechsteID
	Else
		MsgBox &quot;Es gibt keine Aufgaben.&quot;
   		Exit Sub
	End If
	
	&apos;Alle Aufgaben durchgehen, welche 1- als Autor, aber keine Permanente ID haben&apos;
	&apos;ID setzen ab iHoechsteID + 1
	ResultSet = Statement.executeQuery(&quot;SELECT * FROM `Aufgaben`&quot;)
	iHoechsteID = iHoechsteID + 1
	If Not IsNull(ResultSet) Then
  		While ResultSet.next
			sIDAutor = ResultSet.getString(3)
			sID = ResultSet.getString(22)
			salteID = ResultSet.getString(20)
			&apos;MsgBox sIDAutor &amp; &quot; &quot; &amp; sID
			if salteID = &quot;&quot; then
				if cint(sIDAutorInEinstellungen) = cint(sIDAutor) then
					if left(sID,2) &lt;&gt; sIDAutorInEinstellungen &amp;&quot;-&quot; then
&apos;					sAbfrage = &quot;UPDATE &quot;&quot;Aufgaben&quot;&quot; SET &quot;&quot;LinkZuBild&quot;&quot; = &apos;&quot; &amp; sPfadZuBild &amp; &quot;&apos; WHERE  (&quot;&quot;AufgID&quot;&quot; = &quot; &amp; iAufgabenID &amp; &quot;) &quot;
						sSQL = &quot;UPDATE &quot;&quot;Aufgaben&quot;&quot; SET &quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;PermanenteID&quot;&quot; = &apos;&quot; &amp; sIDAutorInEinstellungen &amp;&quot;-&quot; &amp; iHoechsteID &amp; &quot;&apos; WHERE (&quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;AufgID&quot;&quot; = &quot; &amp;ResultSet.getString(1) &amp; &quot;) &quot;
	 					&apos;MsgBox sSQL
	 					StatementUpdate.executeUpdate(sSQL)
	 					iHoechsteID = iHoechsteID + 1
					end if
				end if
			end if
		Wend
	Else
		MsgBox &quot;Es gibt keine Aufgaben.&quot;
  		Exit Sub
	End If
	
	MsgBox &quot;Alle Aufgaben des Autors &quot; &amp; sIDAutorInEinstellungen &amp; &quot; haben eine permanente ID erhalten.&quot; &amp; chr(13) &amp; &quot;Evtl. Datenbank aktualisieren.&quot;
End Sub

sub AuswahlGemaessFilter
	&apos;Letzte Änderung: 12.9.13, Erasmus Bieri

	&apos;Dieser Makro setzt den Boolean &quot;Auswahl&quot; in der Tabelle &quot;Aufgaben&quot; für die im
	&apos;aktuellen Filter ausgewaehlten Aufgaben auf true, für die restlichen Aufgaben auf false
	
	Dim Formular as Object
	Dim sFilter As String
	Dim DatabaseContext As Object
	Dim DataSource As Object
	Dim Connection As Object
	Dim InteractionHandler as Object
	Dim Statement As Object
	
	&apos;Eine Verbindung mit der Datenbank herstellen:
	DatabaseContext = createUnoService(&quot;com.sun.star.sdb.DatabaseContext&quot;)
    DataSource = DatabaseContext.getByName(&quot;aufgdbphys&quot;)
    If Not DataSource.IsPasswordRequired Then
       Connection = DataSource.GetConnection(&quot;&quot;,&quot;&quot;)
    Else
       InteractionHandler = createUnoService(&quot;com.sun.star.sdb.InteractionHandler&quot;)
       Connection = DataSource.ConnectWithCompletion(InteractionHandler)
    End If
    Statement = Connection.createStatement()
	
	&apos;Den im Moment ausgewählten Filter abfragen und im String sFilter speichern
	Formular = ThisComponent.drawpage.getForms.GetByName(&quot;MainForm&quot;)
	sFilter = Formular.filter
	&apos;sFilter bearbeiten: Die Klammern links und rechts werden entfernt
 	sFilterMitte = Mid(sFilter,3,len(sFilter)-4)
 	
    &apos;Zuerst evtl. schon markierte Aufgaben zuruecksetzen
 	Statement.executeUpdate(&quot;UPDATE &quot;&quot;Aufgaben&quot;&quot; SET &quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;Auswahl&quot;&quot; = False WHERE &quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;Auswahl&quot;&quot; = True&quot;)
 	
	&apos;SQL-Update-Befehl ausführen
	sUpdateString = &quot;UPDATE &quot;&quot;Aufgaben&quot;&quot; SET &quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;Auswahl&quot;&quot; = True WHERE &quot;&quot;Aufgaben&quot;&quot;.&quot; &amp; sFilterMitte
	MsgBox sUpdateString
  	Statement.executeUpdate(sUpdateString)
end sub

Sub TestDBFB
	&apos;DatenbankFormularBearbeiten(&quot;Auswahlen&quot;)
	DatenbankFormularBearbeiten(&quot;AufgabenAdministration&quot;)
End Sub


Sub DatenbankFormularBearbeiten(sFormularname as String)
	Dim oDatenbankKontext AS Object
	Dim oVerbindung As Object
	Dim oDatenquelle As Object
	Dim oFormDoc As Object
	Dim Args(1) As New com.sun.star.beans.PropertyValue	
	DatabaseContext = createUnoService(&quot;com.sun.star.sdb.DatabaseContext&quot;)
	oDatenquelle = DatabaseContext.getByName(&quot;aufgdbphys&quot;)
	oVerbindung = oDatenquelle.getConnection( &quot;&quot; , &quot;&quot; )
	If not oDatenquelle.IsPasswordRequired Then
		oVerbindung = oDatenquelle.getConnection( &quot;&quot; , &quot;&quot; )
	else
		oHandler = oDatenquelle.createUnoService(&quot;com.sun.star.sdb.InteractionHandler&quot;)
		oVerbindung = oDatenquelle.ConnectWithCompletion(oHandler)
	End if
	
	Args(0).Name=&quot;ActiveConnection&quot; : Args(0).Value=oVerbindung
	Args(1).Name=&quot;OpenMode&quot; : Args(1).Value=&quot;open&quot;
	oFormDoc=oDatenquelle.DatabaseDocument.FormDocuments.loadComponentFromURL(sFormularname,&quot;_self&quot;,2,Args)
	oFormDoc.CurrentController.Frame.ContainerWindow.setFocus()
End Sub

Sub AppendToArray(oData(), ByVal x)
&apos;While accumulating data, it is convenient to add data to an array without worrying about the size
&apos;of the array—it may not be efficient, but it is convenient. The macro in Listing 63 increases the
&apos;size of an array by one, and then appends data to the end of the array. This technique is
&apos;invaluable when space and complexity are more important than runtime—appending data to an
&apos;array is similar to pushing data onto a stack.
	Dim iUB As Integer &apos;The upper bound of the array.
	Dim iLB As Integer &apos;The lower bound of the array.
	iUB = UBound(oData()) + 1
	iLB = LBound(oData())
	ReDim Preserve oData(iLB To iUB)
	oData(iUB) = x
End Sub


Sub TestLUV
	msgbox sfLetztesUnterverzeichnis(&quot;/kajsakjh/lest/&quot;)
End Sub

Function sfLetztesUnterverzeichnis(sPfad)
	if cstr(Right(sPfad,1)) &lt;&gt; &quot;/&quot; then
		 sPfad = sPfad + &quot;/&quot;
	end if
	dim s(1) as Integer
	i = 1
	j = 1
	do until i &gt; len(sPfad) + 1
		if instr(i,sPfad,&quot;/&quot;) = 0 then
			redim preserve s(j-1)
			exit do
		else					
			s(j-1) = instr(i,sPfad,&quot;/&quot;)
			i = instr(i,sPfad,&quot;/&quot;)
			&apos;msgbox &quot;i: &quot; &amp; i
			j = j+1
			i = i + 1
			&apos;msgbox &quot;j: &quot; &amp; j
			redim preserve s(j)
		end if
	loop
	&apos;msgbox &quot;laenge: &quot; &amp; len(sPfad)
	&apos;for i = 0 to ubound(s) - 1
	&apos;	msgbox &quot;s: &quot; &amp; i &amp; &quot; , &quot; &amp; s(i)
	&apos;next
	sAusgabe = mid(sPfad,s(ubound(s) - 2)+1, cint(s(ubound(s) - 1)) - cint(s(ubound(s) - 2)) - 1)
	&apos;msgbox sAusgabe
	sfLetztesUnterverzeichnis = sAusgabe
End Function

Sub TestKopierenUndUmbenennen
	sWorkingDirectory = sfWorkingDirectory(&quot;aufgdbphys.odb&quot;)
   	sAufgabenVerzeichnis = sfAufgabenverzeichnis
   	sPfad = sWorkingDirectory &amp; sAufgabenVerzeichnis &amp; &quot;/test&quot;
   	sPfadNeu = sWorkingDirectory &amp; sAufgabenVerzeichnis &amp; &quot;/testneu&quot;
   	msgbox sPfad
   	KopierenUndUmbenennenOrdner(sPfad,sPfadNeu)
End Sub

Sub KopierenUndUmbenennenOrdner(sAlterURL,sNeuerURL)
	&apos;msgbox &quot;Beginn Sub KopierenUndUmbenennenOrdner(sAlterURL,sNeuerURL)&quot;
	oSFA = createUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
	&apos;neuen Ordner erstellen:
	if FileExists(sNeuerURL) then
		MsgBox &quot;Verzeichnis &quot; &amp; chr(13) &amp; chr(13) &amp; sNeuerURL &amp; chr(13) &amp; chr(13) &amp; &quot; existiert schon!&quot; &amp; chr(13) &amp; chr(13) &amp; _
		&quot;Es wird KEIN neuer Ordner erstellt und KEINE Dateien kopiert!&quot;
	else
		oSFA.createFolder(sNeuerURL)
		&apos;Ordnerinhalt bestimmen:	
		if FileExists(sAlterURL) then
			sOrdnerinhalt = oSFA.getFolderContents(sAlterURL,1)
		else
			redim sOrdnerinhalt	&apos;sOrdnerinhalt wird auf Empty gesetzt
		end if	
		&apos;msgbox &quot;sAlterURL: &quot; &amp; sAlterURL 
		&apos;msgbox &quot;sNeuerURL: &quot; &amp; sNeuerURL 
		&apos;msgbox &quot;sOrdnerinhalt: &quot; &amp; sOrdnerinhalt(1)
		&apos;If Not IsNull(sOrdnerinhalt) Then
		If Not IsEmpty(sOrdnerinhalt) Then
			for i = 0 to ubound(sOrdnerinhalt)
				&apos;msgbox FileNameoutofPath(sOrdnerinhalt(i))
				&apos;msgbox DirectoryNameoutofPath(sOrdnerinhalt(i),&quot;/&quot;)
				&apos;msgbox &quot;alt: &quot; &amp; sOrdnerinhalt(i) &amp; chr(13) &amp; &quot;neu: &quot; &amp; sNeuerURL &amp; &quot;/&quot; &amp; FileNameoutofPath(sOrdnerinhalt(i))
				oSFA.copy(sOrdnerinhalt(i),sNeuerURL &amp; &quot;/&quot; &amp; FileNameoutofPath(sOrdnerinhalt(i)))
			next
		End If
	end if
	&apos;msgbox &quot;Ende Sub KopierenUndUmbenennenOrdner(sAlterURL,sNeuerURL)&quot;
End Sub

Sub PfadeVorschaubilderAnpassen
	&apos;StatusBar:
	oStatus = ThisComponent.CurrentController.StatusIndicator

	Dim DatabaseContext as Object, s as String
	Dim oDatenquelle as Object, oHandler as Object, oDatVerb as Object
	Dim oStatement as Object, oErgSet as Object, sSQL as String
	Dim sIDString as String
	DatabaseContext = createUnoService(&quot;com.sun.star.sdb.DatabaseContext&quot;)
	oDatenquelle = DatabaseContext.getByName(&quot;aufgdbphys&quot;)
	If not oDatenquelle.IsPasswordRequired Then
		oDatVerb = oDatenquelle.getConnection(&quot;&quot;,&quot;&quot;)
	else
		oHandler = oDatenquelle.createUnoService(&quot;com.sun.star.sdb.InteractionHandler&quot;)
		oDatVerb = oDatenquelle.ConnectWithCompletion(oHandler)
	End if
	oStatement = oDatVerb.createStatement()		
    sSQL = &quot;SELECT &quot;&quot;AufgID&quot;&quot; FROM &quot;&quot;Aufgaben&quot;&quot;&quot;
    oErgSet = oStatement.executeQuery(sSQL)
    
    iZaehler = 0
    iAnzahlElementeoErgSet = 0
    
&apos;    sID = sfAusgabeID() &apos; Aufruf von Funktion sfAusgabeID()
	sWorkingDirectory=sfWorkingDirectory(&quot;aufgdbphys.odb&quot;)
	sTexDateienVerzeichnis = sfAufgabenverzeichnis    
    
	If Not IsNull(oErgSet) Then
		While oErgSet.next
			iAnzahlElementeoErgSet = iAnzahlElementeoErgSet + 1
		Wend
	End If    
        
    oStatus.start(&quot;Bitte warten ...&quot;, iAnzahlElementeoErgSet)
    
    &apos;Nochmals abfragen:
    oErgSet = oStatement.executeQuery(sSQL)
    If Not IsNull(oErgSet) Then
		While oErgSet.next
			sID = oErgSet.getString(1)
			iZaehler = iZaehler + 1
			oStatus.text = &quot;Aufgabe mit ID &quot; &amp; iZaehler &amp; &quot; von &quot; &amp; iAnzahlElementeoErgSet &amp; &quot; wird bearbeitet.&quot;
			oStatus.value = iZaehler
			&apos;alt: 9.8.13
			&apos;PfadZuBildSetzen(convertfromurl(sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sID &amp; &quot;/aufgabe.jpg&quot;),cint(sID))
			&apos;neu:
			PfadZuBildSetzen(sWorkingDirectory &amp; sTexDateienVerzeichnis &amp; &quot;/&quot; &amp; sID &amp; &quot;/aufgabe.jpg&quot;,cint(sID))
		Wend
	End If
	oStatus.end
	MsgBox iZaehler
End Sub

Sub TestLoesungenJN
	&apos;Aktives Arbeitsblatt ermitteln
	&apos;sArbeitsblattOriginal=odoc.currentcontroller.activesheet.Name
	&apos;oSheet = ThisComponent.sheets.getByName(sArbeitsblattOriginal)
	&apos;oDraw = oSheet.drawpage
	oForm = ThisComponent.drawpage.getForms.GetByName(&quot;MainForm&quot;)
	oLsgJN = oForm.getbyName(&quot;LoesungenJN&quot;)
	
	if oLsgJN.State = 1 then
		MsgBox &quot;Lösungen werden angezeigt&quot;
	else
		MsgBox &quot;Lösungen werden NICHT angezeigt&quot;
	end if
End Sub

Sub MaxAufgIDBestimmen
	&apos;Wird diese Routine überhaupt verwendet? Löschkandidat?
	Dim DatabaseContext As Object
	Dim DataSource As Object
	Dim Connection As Object
	Dim InteractionHandler as Object
	Dim Statement As Object
    Dim ResultSet, ResultSet2 As Object

    &apos;DatenbankKontext erstellen
    DatabaseContext = createUnoService(&quot;com.sun.star.sdb.DatabaseContext&quot;)
    &apos;Datenbank kontaktieren
    DataSource = DatabaseContext.getByName(&quot;aufgdbphys&quot;)
    &apos;Testen, ob Passwort benötigt wird
    If Not DataSource.IsPasswordRequired Then
    	Connection = DataSource.GetConnection(&quot;&quot;,&quot;&quot;)
    Else	
    	InteractionHandler = createUnoService(&quot;com.sun.star.sdb.InteractionHandler&quot;)
    	Connection = DataSource.ConnectWithCompletion(InteractionHandler)
    End If
    &apos;Abfrage erstellen
    Statement = Connection.createStatement()
    ResultSet = Statement.executeQuery(&quot;SELECT `Aufgaben`.`AufgID` AS `AufgID` FROM `Aufgaben` ORDER BY `Aufgaben`.`AufgID`&quot;)
End Sub

Function AusgwAufgIDBestimmen 
	Dim DatabaseContext, DataSource, Connection, InteractionHandler, Statement, ResultSet As Object
	Dim sID As String 
	
    &apos;DatenbankKontext erstellen
    DatabaseContext = createUnoService(&quot;com.sun.star.sdb.DatabaseContext&quot;)
    &apos;Datenbank kontaktieren
    DataSource = DatabaseContext.getByName(&quot;aufgdbphys&quot;)
    &apos;Testen, ob Passwort benötigt wird
    If Not DataSource.IsPasswordRequired Then
    	Connection = DataSource.GetConnection(&quot;&quot;,&quot;&quot;)
    Else	
    	InteractionHandler = createUnoService(&quot;com.sun.star.sdb.InteractionHandler&quot;)
    	Connection = DataSource.ConnectWithCompletion(InteractionHandler)
    End If
    &apos;Abfrage erstellen
    Statement = Connection.createStatement()
    &apos;ResultSet = Statement.executeQuery(&quot;SELECT `Aufgaben`.`AufgID` AS `AufgID`, `Aufgaben`.`Position` AS `Position` FROM `Aufgaben` `Aufgaben` WHERE ( `Aufgaben`.`Auswahl` = True ) ORDER BY `Aufgaben`.`Position`&quot;)
    ResultSet = Statement.executeQuery(&quot;SELECT * FROM `Aufgaben` WHERE ( `Aufgaben`.`Auswahl` = True ) ORDER BY `Aufgaben`.`Position`&quot;)

   &apos;Ausgewählte ID auslesen:
   If Not IsNull(ResultSet) Then
   		While ResultSet.next
   			sHilfsvariable = ResultSet.getString(22)
   			&apos;MsgBox &quot;Hilfsvariable: &quot; &amp; sHilfsvariable
			sID = sID &amp; sHilfsvariable &amp; &quot; &quot;
			&apos;MsgBox iZaehler01
		Wend
   	End If
	&apos;MsgBox sID
	AusgwAufgIDBestimmen = sID
End Function


Function AusgwAufgPositionBestimmen 
	Dim DatabaseContext, DataSource, Connection, InteractionHandler, Statement, ResultSet As Object
	Dim sPosition As String 
	
    &apos;DatenbankKontext erstellen
    DatabaseContext = createUnoService(&quot;com.sun.star.sdb.DatabaseContext&quot;)
    &apos;Datenbank kontaktieren
    DataSource = DatabaseContext.getByName(&quot;aufgdbphys&quot;)
    &apos;Testen, ob Passwort benötigt wird
    If Not DataSource.IsPasswordRequired Then
    	Connection = DataSource.GetConnection(&quot;&quot;,&quot;&quot;)
    Else	
    	InteractionHandler = createUnoService(&quot;com.sun.star.sdb.InteractionHandler&quot;)
    	Connection = DataSource.ConnectWithCompletion(InteractionHandler)
    End If
    &apos;Abfrage erstellen
    Statement = Connection.createStatement()
    ResultSet = Statement.executeQuery(&quot;SELECT `Aufgaben`.`AufgID` AS `AufgID`, `Aufgaben`.`Position` AS `Position` FROM `Aufgaben` `Aufgaben` WHERE ( `Aufgaben`.`Auswahl` = True ) ORDER BY `Aufgaben`.`Position`&quot;)
   
   &apos;Ausgewählte ID auslesen:
   If Not IsNull(ResultSet) Then
   		While ResultSet.next
   			sHilfsvariable = ResultSet.getString(2)
   			if sHilfsvariable = &quot;&quot; then
   				sHilfsvariable = &quot;1&quot;
   			end if	
   			&apos;MsgBox &quot;Hilfsvariable: &quot; &amp; sHilfsvariable
			sPosition = sPosition &amp; sHilfsvariable &amp; &quot; &quot;
			&apos;MsgBox iZaehler01
		Wend
   	End If
	&apos;MsgBox sID
	AusgwAufgPositionBestimmen = sPosition
End Function

Function Replace(Source As String, Search As String, NewPart As String)
	Dim Result As String
	Dim StartPos As Long
	Dim CurrentPos As Long

	Result = &quot;&quot;
	StartPos = 1
	CurrentPos = 1
	
	If Search = &quot;&quot; Then
		Result = Source
	Else
		Do While CurrentPos &lt;&gt; 0
			CurrentPos = InStr(StartPos, Source, Search)
			If CurrentPos &lt;&gt; 0 Then
				Result = Result + Mid(Source, StartPos, CurrentPos - StartPos)
				Result = Result + NewPart
				StartPos = CurrentPos + Len(Search)
			Else
				Result = Result + Mid(Source, StartPos, Len(Source))
			End If		&apos; Position &lt;&gt; 0
		Loop
	End If

	Replace = Result
End Function

Sub ShellSort(myList())
Dim k1 As Long, k2 As Long, listSize As Long
Dim x1 As Long, isSorted As Boolean
Dim swapping
listSize = UBound(myList()) +1 -LBound(myList())
k1 = Fix(listSize /2)
do while k1 &gt; 0
  k2 = UBound(myList()) - k1
  isSorted = true
  for x1 = LBound(myList()) to k2
    if StrComp(myList(x1), myList(x1 +k1), 0) = 1  then
      swapping = myList(x1)
      myList(x1) = myList(x1 +k1)
      myList(x1 +k1) = swapping
      isSorted = false
    end if
  next
  if isSorted then
    k1 = Fix(k1 /2)
  end if
loop
End Sub

Sub MarkierteAufgabenZuruecksetzen
	&apos;Aktuelle Aufgabe speichern
	AufgabeSpeichern()
	
	Dim DatabaseContext As Object
	Dim DataSource As Object
	Dim Connection As Object
	Dim InteractionHandler as Object
	Dim Statement As Object
    &apos;Dim ResultSet As Object
    &apos;Dim UnterGebiet As Integer
    DatabaseContext = createUnoService(&quot;com.sun.star.sdb.DatabaseContext&quot;)
    DataSource = DatabaseContext.getByName(&quot;aufgdbphys&quot;)
    If Not DataSource.IsPasswordRequired Then
       Connection = DataSource.GetConnection(&quot;&quot;,&quot;&quot;)
    Else
       InteractionHandler = createUnoService(&quot;com.sun.star.sdb.InteractionHandler&quot;)
       Connection = DataSource.ConnectWithCompletion(InteractionHandler)
    End If
    Statement = Connection.createStatement()
 	Statement.executeUpdate(&quot;UPDATE &quot;&quot;Aufgaben&quot;&quot; SET &quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;Auswahl&quot;&quot; = False WHERE &quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;Auswahl&quot;&quot; = True&quot;)
 	
 	&apos;Formular aktualisieren, damit die Änderung im Formular sichtbar wird
 	DatenbankAktualisieren()
 	MsgBox &quot;Nun sind keine Aufgaben mehr ausgewählt.&quot;
End Sub

Sub AlleAufgabenAuswaehlen
	Dim DatabaseContext As Object
	Dim DataSource As Object
	Dim Connection As Object
	Dim InteractionHandler as Object
	Dim Statement As Object
    &apos;Dim ResultSet As Object
    &apos;Dim UnterGebiet As Integer
    DatabaseContext = createUnoService(&quot;com.sun.star.sdb.DatabaseContext&quot;)
    DataSource = DatabaseContext.getByName(&quot;aufgdbphys&quot;)
    If Not DataSource.IsPasswordRequired Then
       Connection = DataSource.GetConnection(&quot;&quot;,&quot;&quot;)
    Else
       InteractionHandler = createUnoService(&quot;com.sun.star.sdb.InteractionHandler&quot;)
       Connection = DataSource.ConnectWithCompletion(InteractionHandler)
    End If
    Statement = Connection.createStatement()
 	Statement.executeUpdate(&quot;UPDATE &quot;&quot;Aufgaben&quot;&quot; SET &quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;Auswahl&quot;&quot; = True WHERE &quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;Auswahl&quot;&quot; = False&quot;)
 	Statement.executeUpdate(&quot;UPDATE &quot;&quot;Aufgaben&quot;&quot; SET &quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;Auswahl&quot;&quot; = True WHERE &quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;Auswahl&quot;&quot; = Null&quot;)
 	&apos;AufgabeSpeichern()
 	DatenbankAktualisieren()
 	MsgBox &quot;Nun sind ALLE Aufgaben ausgewählt.&quot;
End Sub


sub DatenbankAktualisieren
&apos;	rem ----------------------------------------------------------------------
&apos;	rem define variables
&apos;	dim document   as object
&apos;	dim dispatcher as object
&apos;	rem ----------------------------------------------------------------------
&apos;	rem get access to the document
&apos;	document   = ThisComponent.CurrentController.Frame
&apos;	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
&apos;	
&apos;	rem ----------------------------------------------------------------------
&apos;	&apos;MsgBox &quot;Die Aufgabendatenbank wird aktualisiert.&quot;
&apos;	dispatcher.executeDispatch(document, &quot;.uno:Refresh&quot;, &quot;&quot;, 0, Array())
	
&apos;Neu in Ext. 1.1.5:
	oForm = ThisComponent.drawpage.getForms.GetByName(&quot;MainForm&quot;)
	&apos;Aktuellen Datensatz bestimmen
	Book = oForm.getBookmark
	&apos;Formular neu laden, nun wird der erste Datensatz angezeigt
	oForm.reload()
	&apos;Wieder zu aktuellem Datensatz springen
	oForm.moveToBookmark(Book)
end sub

sub DatenbankAktualisierenStyle
&apos;	rem ----------------------------------------------------------------------
&apos;	rem define variables
&apos;	dim document   as object
&apos;	dim dispatcher as object
&apos;	rem ----------------------------------------------------------------------
&apos;	rem get access to the document
	document   = ThisComponent.CurrentController.Frame
	dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)
&apos;	
&apos;	rem ----------------------------------------------------------------------
&apos;	&apos;MsgBox &quot;Die Aufgabendatenbank wird aktualisiert.&quot;
	dispatcher.executeDispatch(document, &quot;.uno:Refresh&quot;, &quot;&quot;, 0, Array())
	
&apos;Neu in Ext. 1.1.5:
&apos;	oForm = ThisComponent.drawpage.getForms.GetByName(&quot;MainForm&quot;)
	&apos;Aktuellen Datensatz bestimmen
&apos;	Book = oForm.getBookmark
	&apos;Formular neu laden, nun wird der erste Datensatz angezeigt
&apos;	oForm.reload()
	&apos;Wieder zu aktuellem Datensatz springen
&apos;	oForm.moveToBookmark(Book)
end sub


Sub AuswahlSpeichern
	Dim sNamePruefung, sAusgewaehlteAufgaben As String
	sNamePruefung = InputBox(&quot;Geben Sie den Namen der zu speichernden Prüfung ein:&quot;, &quot;Name Prüfung&quot;, &quot;Prüfung01&quot;)
	sThemaPruefung = InputBox(&quot;Geben Sie das Thema der zu speichernden Prüfung ein:&quot;, &quot;Thema Prüfung&quot;, &quot;Thema&quot;)
	sKlassePruefung = InputBox(&quot;Geben Sie die Klasse ein:&quot;, &quot;Klasse&quot;, &quot;G2 ...&quot;)
	sDatumPruefung = InputBox(&quot;Geben Sie das Datum ein:&quot;, &quot;Datum&quot;, &quot;1. April 2011&quot;)
	sSeriePruefung = InputBox(&quot;Geben Sie die Serie ein:&quot;, &quot;Serie&quot;, &quot;A&quot;)
	sLehrerPruefung = InputBox(&quot;Geben Sie Ihr Lehrerkürzel ein:&quot;, &quot;Lehrerkürzel&quot;, &quot;xx&quot;)

	sAusgewaehlteAufgaben = AusgwAufgIDBestimmen()
	sAusgewaehltePositionen = AusgwAufgPositionBestimmen()
	MsgBox &quot;ID: &quot; &amp; sAusgewaehlteAufgaben &amp; &quot; Positionen: &quot; &amp; sAusgewaehltePositionen
	
	Dim DatabaseContext As Object
	Dim DataSource As Object
	Dim Connection As Object
	Dim InteractionHandler as Object
	Dim Statement As Object
	DatabaseContext = createUnoService(&quot;com.sun.star.sdb.DatabaseContext&quot;)
    DataSource = DatabaseContext.getByName(&quot;aufgdbphys&quot;)
    If Not DataSource.IsPasswordRequired Then
       Connection = DataSource.GetConnection(&quot;&quot;,&quot;&quot;)
    Else
       InteractionHandler = createUnoService(&quot;com.sun.star.sdb.InteractionHandler&quot;)
       Connection = DataSource.ConnectWithCompletion(InteractionHandler)
    End If
    Statement = Connection.createStatement()
 	&apos;&apos;sInsert = &quot;INSERT INTO &quot;&quot;GespeicherteAuswahlen&quot;&quot; (&quot;&quot;NameAuswahl&quot;&quot;, &quot;&quot;AufgabenIDs&quot;&quot;, &quot;&quot;Position&quot;&quot;) VALUES (&apos;&quot; &amp; sNamePruefung &amp; &quot;&apos;, &apos;&quot; &amp; sAusgewaehlteAufgaben &amp; &quot;&apos;)&quot;
	&apos;sInsert = &quot;INSERT INTO &quot;&quot;GespeicherteAuswahlen&quot;&quot; (&quot;&quot;NameAuswahl&quot;&quot;, &quot;&quot;AufgabenIDs&quot;&quot;, &quot;&quot;Position&quot;&quot;) VALUES (&apos;&quot; &amp; sNamePruefung &amp; &quot;&apos;, &apos;&quot; &amp; sAusgewaehlteAufgaben &amp; &quot;&apos;, &apos;&quot; &amp; sAusgewaehltePositionen &amp; &quot;&apos;)&quot;
	sInsert = &quot;INSERT INTO &quot;&quot;GespeicherteAuswahlen&quot;&quot; (&quot;&quot;NameAuswahl&quot;&quot;, &quot;&quot;AufgabenIDs&quot;&quot;, &quot;&quot;Position&quot;&quot;, &quot;&quot;Thema&quot;&quot;, &quot;&quot;Klasse&quot;&quot;, &quot;&quot;Datum&quot;&quot;, &quot;&quot;Lehrerkürzel&quot;&quot;, &quot;&quot;Serie&quot;&quot;) VALUES (&apos;&quot; &amp; sNamePruefung &amp; &quot;&apos;, &apos;&quot; &amp; sAusgewaehlteAufgaben &amp; &quot;&apos;, &apos;&quot; &amp; sAusgewaehltePositionen &amp; &quot;&apos;, &apos;&quot; &amp; sThemaPruefung &amp; &quot;&apos;, &apos;&quot; &amp; sKlassePruefung &amp; &quot;&apos;, &apos;&quot; &amp; sDatumPruefung &amp; &quot;&apos;, &apos;&quot; &amp; sLehrerPruefung &amp; &quot;&apos;, &apos;&quot; &amp; sSeriePruefung &amp; &quot;&apos;)&quot;
 	&apos;sAusgewaehltePositionen
 	MsgBox sInsert
 	Statement.execute(sInsert)
End Sub

&apos; Deletes out of a String &apos;BigString&apos; a possible Partstring &apos;CompString&apos;
Function DeleteStr(ByVal BigString,CompString as String) as String
Dim i%, CompLen%, BigLen%
	CompLen = Len(CompString)
	i = 1
	While i &lt;&gt; 0
		i = Instr(i, BigString,CompString)
		If i &lt;&gt; 0 then
			BigLen = Len(BigString)
			BigString = Mid(BigString,1,i-1) + Mid(BigString,i+CompLen,BigLen-i+1-CompLen)
		End If
	Wend
	DeleteStr = BigString
End Function

Sub AuswahlPruefungAuslesen
	&apos;Aktuelle ausgewählte Aufgaben zurücksetzen
	MarkierteAufgabenZuruecksetzen()
	
	sNamePruefung = sfAusgabePruefung()
	&apos;MsgBox sNamePruefung
	
	Dim DatabaseContext as Object, s as String
	Dim oDatenquelle as Object, oHandler as Object, oDatVerb as Object
	Dim oStatement as Object, oErgSet as Object, sSQL as String
	Dim sIDString as String
	DatabaseContext = createUnoService(&quot;com.sun.star.sdb.DatabaseContext&quot;)
	oDatenquelle = DatabaseContext.getByName(&quot;aufgdbphys&quot;)
	If not oDatenquelle.IsPasswordRequired Then
		oDatVerb = oDatenquelle.getConnection(&quot;&quot;,&quot;&quot;)
	else
		oHandler = oDatenquelle.createUnoService(&quot;com.sun.star.sdb.InteractionHandler&quot;)
		oDatVerb = oDatenquelle.ConnectWithCompletion(oHandler)
	End if
	oStatement = oDatVerb.createStatement()		
    &apos;sSQL = &quot;SELECT &quot;&quot;IDAuswahl&quot;&quot;,&quot;&quot;NameAuswahl&quot;&quot;,&quot;&quot;AufgabenIDs&quot;&quot;,&quot;&quot;Position&quot;&quot; FROM &quot;&quot;GespeicherteAuswahlen&quot;&quot; WHERE &quot;&quot;NameAuswahl&quot;&quot; = &apos;&quot; &amp; sNamePruefung &amp; &quot;&apos;&quot;
    sIDAuswahlAktuell = ThisComponent.drawpage.getForms.GetByName(&quot;GespAuswahl&quot;).getbyName(&quot;Textfeld 1&quot;).text
	sSQL = &quot;SELECT &quot;&quot;IDAuswahl&quot;&quot;,&quot;&quot;NameAuswahl&quot;&quot;,&quot;&quot;AufgabenIDs&quot;&quot;,&quot;&quot;Position&quot;&quot; FROM &quot;&quot;GespeicherteAuswahlen&quot;&quot; WHERE &quot;&quot;IDAuswahl&quot;&quot; = &apos;&quot; &amp; sIDAuswahlAktuell &amp; &quot;&apos;&quot;
    oErgSet = oStatement.executeQuery(sSQL)
	If Not IsNull(oErgSet) Then
		Do while oErgSet.next
			sIDString = oErgSet.getstring(3)
			sPositionString = oErgSet.getstring(4)
			if sPositionString = &quot;&quot; then
				sPositionString = &quot;1&quot;
			end if	
			&apos;MsgBox &quot;ID: &quot; &amp; sIDString &amp; &quot; Position: &quot; &amp; sPositionString
			exit do
		Loop
	End If
	
	&apos; - Umwandeln des sIDString und sPositionString in einen Array mit den einzelnen Einträgen.
	saIDString = afStringInArrayUmwandeln(sIDString)
	saPositionString = afStringInArrayUmwandeln(sPositionString)
	&apos; - Mit einem UPDATE Befehl die Aufgaben mit den entsprechenden ID &apos;auswaehlen&apos;
	for i = 0 to ubound(saIDString())
		if saIDString(i) = &quot;&quot; then
		else
			&apos;sSQL = &quot;UPDATE &quot;&quot;Aufgaben&quot;&quot; SET &quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;Auswahl&quot;&quot; = True WHERE &quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;AufgID&quot;&quot; = &quot; &amp; saIDString(i) &amp; &quot;&quot;
			sSQL = &quot;UPDATE &quot;&quot;Aufgaben&quot;&quot; SET &quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;Auswahl&quot;&quot; = True, &quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;Position&quot;&quot; = &quot; &amp; saPositionString(i) &amp; &quot; WHERE &quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;PermanenteID&quot;&quot; = &apos;&quot; &amp; DeleteStr(saIDString(i),&quot; &quot;) &amp; &quot;&apos;&quot;
			&apos;sSQL = &quot;UPDATE &quot;&quot;Aufgaben&quot;&quot; SET &quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;Auswahl&quot;&quot; = True, &quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;Position&quot;&quot; = &quot; &amp; saPositionString(i) &amp; &quot; WHERE &quot;&quot;Aufgaben&quot;&quot;.&quot;&quot;PermanenteID&quot;&quot; = &apos;2SPALT3M1-ot&apos;&quot;
	 		&apos;MsgBox sSQL
	 		oStatement.executeUpdate(sSQL)
	 		
	 	end if	
	next i
 	&apos;DatenbankAktualisieren()
	
	&apos; Subroutine schreiben mit EIngabe (ID) und Aktivierung der entsprechenden Aufgabe 	
	MsgBox &quot;Die Aufgaben wurden ausgewählt.&quot; 
End Sub

Function afStringInArrayUmwandeln(sString as String)
	&apos;sZwischenspeicher = sMystring
	dim iArrayPosition(500) As Integer
	&apos;Vorne und hinten von sString je ein Leerzeichen einfügen:
	sString = &quot; &quot; &amp; sString &amp; &quot; &quot;
		
	&apos;Laenge sString bestimmen:
	&apos;MsgBox sString
	sLaengeString = Len(sString)
	
	&apos;(1) nach Leerzeichen in sString suchen und mittels eines Buchstabenzaehlers deren Position bestimmen
		iLoops = 1
	iBuchstabenzaehler = 1
	Do Until iBuchstabenzaehler &gt; sLaengeString
		&apos;bestimme Position von sSearchstring in sMystring
		PositionLeerzeichen = InStr(iBuchstabenzaehler, sString, &quot; &quot;)
		If PositionLeerzeichen = 0 Then
			Exit Do
		End If	
		&apos;Zeige Position an
		&apos;MsgBox &quot;Position: &quot; &amp; ResultString
		&apos;Trage Ergebnis im Array iArrayPosition an der Position iLoops ein
		iArrayPosition(iLoops-1) = PositionLeerzeichen
		&apos;MsgBox &quot;Loops: &quot; &amp; iLoops
		iLoops = iLoops + 1
		iBuchstabenzaehler = PositionLeerzeichen + 1
	Loop
	
	&apos;--------------------------------------
	&apos;Test: iArrayPosition auslesen
	&apos;sTest = &quot;&quot;
	&apos;for i=0 to ubound(iArrayPosition())
	&apos;	If iArrayPosition(i) = 0 then
	&apos;	else
	&apos;		sTest = sTest &amp; &quot; &quot; &amp; cstr(iArrayPosition(i))
	&apos;	end if	
	&apos;next i
	&apos;MsgBox sTest
	&apos;Ende Test
	&apos;--------------------------------------
	
	&apos;&apos;Die Eintraege in iArrayPosition durchgehen bis 0 und 
	Dim iLoops2 As Integer
	iLoops2 = 0
	for i = 0 to ubound(iArrayPosition())-1
		If iArrayPosition(i) = 0 then
		else
			If iArrayPosition(i+1)-iArrayPosition(i) &gt; 1 then
				iLoops2 = iLoops2 + 1
			end if	
		end if	
	next i
	&apos;MsgBox &quot;Loops2: &quot; &amp; iLoops2
	Dim sArrayEintraege(iLoops2) As String
	iLoops2 = 0
	for i = 0 to ubound(iArrayPosition())-1
		If iArrayPosition(i) = 0 then
		else
			If iArrayPosition(i+1)-iArrayPosition(i) &gt; 1 then
				sArrayEintraege(iLoops2) = Mid(sString,iArrayPosition(i),iArrayPosition(i+1)-iArrayPosition(i))
				&apos;MsgBox sArrayEintraege(iLoops2)
				iLoops2 = iLoops2 + 1
			end if	
		end if	
	next i
	
	&apos;for i = 0 to ubound(sArrayEintraege())
	&apos;	afStringInArrayUmwandeln(i) = sArrayEintraege(i)
	&apos;next i
	afStringInArrayUmwandeln = sArrayEintraege
End Function

Sub TestStringArray
	sString = &quot;1 2 a&quot;
	sString = sString &amp; chr(13) &amp; &quot;3 4 b&quot;
	sString = sString &amp; chr(13) &amp; &quot;5 6 c&quot;
	sString = sString &amp; chr(13) &amp; &quot;7 8 d&quot;
	sString = sString &amp; chr(13) &amp; &quot;9 10 e&quot;
	sString = sString &amp; chr(13) &amp; &quot;11 12 f&quot;
	sString = sString &amp; chr(13) &amp; &quot;13 14 g&quot;
	sString = sString &amp; chr(13) &amp; &quot;15 16 h&quot;
	sString = sString &amp; chr(13) &amp; &quot;17 18 i&quot;
	sString = sString &amp; chr(13) &amp; &quot;19 20 j&quot; &apos;&amp; chr(13) &amp; chr(13) &amp; chr(10)
	aaaa = afStringInArray(sString)
	&apos;bbbb = afStringInArrayUmwandeln(sString)
	msgbox aaaa(0,2)
	&apos;msgbox bbbb(1)
End Sub

Function afStringInArray(sString As String)
	&apos;msgbox &quot;Beginn Function afStringInArray(sString As String)&quot;
	&apos;msgbox sString &amp; &quot;-&quot;
	do while Right(sString,1) = chr(13)
		sString = Left(sString,len(sString) - 1)
		&apos;msgbox sString &amp; &quot;-&quot; &amp; i
	loop
		do while Right(sString,1) = chr(10)
		sString = Left(sString,len(sString) - 1)
		&apos;msgbox sString &amp; &quot;-&quot; &amp; i
	loop
		do while Right(sString,1) = chr(13)
		sString = Left(sString,len(sString) - 1)
		&apos;msgbox sString &amp; &quot;-&quot; &amp; i
	loop
		do while Right(sString,1) = chr(10)
		sString = Left(sString,len(sString) - 1)
		&apos;msgbox sString &amp; &quot;-&quot; &amp; i
	loop
	&apos;Ziel: Verschachtelte &quot;String&quot;funktion
	aArray1 = Split(sString,chr(13))
	aHilf = Split(aArray1(0))
	iZeilen = ubound(aArray1) + 1
	&apos;msgbox &quot;Zeilen: &quot; &amp; iZeilen
	iSpalten = ubound(aHilf) + 1
	&apos;msgbox &quot;Spalten: &quot; &amp; iSpalten
	Dim aAusgabe(iZeilen,iSpalten)
	for i = 0 to iZeilen - 1
		aHilf = Split(aArray1(i))
		for j = 0 to iSpalten - 1
			&apos;msgbox i &amp; &quot;,&quot; &amp; j
			aAusgabe(i,j) = aHilf(j)
		next
	next
	afStringInArray = aAusgabe
	&apos;msgbox &quot;Ende Function afStringInArray(sString As String)&quot;
End Function
</script:module>